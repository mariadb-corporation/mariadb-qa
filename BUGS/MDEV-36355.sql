CREATE TABLE v00 (c01 INT, c02 TEXT);
CREATE INDEX i03 ON v00 (c01);
INSERT INTO v00 (c01, c02) VALUES (0, 'abc');
CREATE TABLE IF NOT EXISTS v00 MIN_ROWS 1234567890 CONNECTION := 'string' IGNORE SELECT * FROM v00 AS ta35554701 NATURAL STRAIGHT_JOIN v00 AS ta35554702 RIGHT OUTER JOIN v00 AS ta35554703 NATURAL LEFT OUTER JOIN v00 AS ta35554704 ON FALSE <=> TRUE NOT IN ( SELECT 'string' ) AND FALSE <=> FALSE IN ( SELECT 'string' ) || TRUE ORDER BY TRUE ASC, FALSE <=> FALSE IN ( SELECT 'string' ) FOR UPDATE;
CREATE TABLE IF NOT EXISTS v00 STORAGE DISK IGNORE SELECT * FROM v00 AS ta29673400 CROSS JOIN v00 AS ta29673401 NATURAL LEFT OUTER JOIN v00 AS ta29673402 NATURAL RIGHT JOIN ( v00 AS ta29673403 LEFT JOIN v00 AS ta29673404 ON FALSE ) ORDER BY TRUE ASC, FALSE <=> FALSE IN ( SELECT 'string' ) FOR UPDATE;
ALTER SEQUENCE IF EXISTS sequence_name_0 RESTART WITH + 1234567890 START := 1234567890;
ALTER DATABASE COMMENT 'string' COMMENT := 'string';
ALTER DATABASE COMMENT = 'string' COMMENT := 'string';
CREATE INDEX IF NOT EXISTS i27225501 USING BTREE ON v00 ( c01 ) WAIT 1234567890 USING BTREE USING BTREE LOCK DEFAULT;
SELECT * FROM v00 AS ta3979400 NATURAL JOIN v00 AS ta3979401 LEFT JOIN v00 AS ta3979402 USING ( c02 ) WHERE FALSE <=> FALSE IN ( SELECT 'string' ) GROUP BY TRUE DESC HAVING + INTERVAL TRUE <=> TRUE IN ( SELECT 'string' ) HOUR_MICROSECOND + TRUE <=> TRUE IN ( SELECT 'string' ) <=> TRUE IN ( SELECT 'string' );
ALTER SEQUENCE IF EXISTS sequence_name_0 NOMAXVALUE;
SELECT FALSE <=> FALSE IN ( SELECT 'string' ), FALSE <=> TRUE IN ( SELECT 'string' ) FROM v00 AS ta18770000 NATURAL LEFT JOIN v00 AS ta18770001 LEFT JOIN ( v00 AS ta18770002 ) USING ( c01, c02, c01 ) GROUP BY FALSE IS NOT TRUE;
CREATE INDEX i29675701 USING BTREE ON v00 ( c02 ( 1234567890 ) ASC ) WAIT + 1234567890 USING HASH LOCK DEFAULT;
SELECT * FROM v00, ( v00 AS ta24670301 LEFT OUTER JOIN v00 AS ta24670302 ON TRUE <=> FALSE IN ( SELECT - INTERVAL TRUE XOR FALSE <=> FALSE IN ( SELECT 'string' ) HOUR_SECOND + TRUE <=> TRUE IN ( SELECT 'string' ) <=> TRUE NOT IN ( SELECT 'string' ) OR TRUE IS NOT FALSE <=> TRUE IN ( SELECT 'string' ) ) ) GROUP BY TRUE ASC WITH ROLLUP;
SELECT * FROM ( v00 AS ta24671100 NATURAL LEFT OUTER JOIN v00 AS ta24671101 ) INNER JOIN ( v00 AS ta24671102 NATURAL JOIN ( ( ( SELECT 'string' ) = ta24671104 ) NATURAL STRAIGHT_JOIN v00 AS ta24671103 ) ) GROUP BY TIME ( TRUE <=> FALSE IN ( SELECT 'string' ) ) + INTERVAL REPEAT ( FALSE <=> TRUE IN ( SELECT 'string' ), FALSE ) % TRUE * INTERVAL TRUE DAY_MICROSECOND + FALSE <=> FALSE IN ( SELECT 'string' ) <=> TRUE NOT IN ( SELECT 'string' ) DAY_SECOND <=> TRUE NOT IN ( SELECT 'string' );
BACKUP UNLOCK;
SELECT TRUE <=> COLUMN_ADD ( TRUE, FALSE, FALSE AS DECIMAL, FALSE, TRUE <=> FALSE IN ( SELECT 'string' ) ) & INTERVAL FALSE QUARTER + FALSE <=> TRUE IN ( SELECT 'string' ) IN ( SELECT TRUE <=> TRUE IN ( SELECT 'string' ) XOR TRUE && TRUE ) FROM v00, ( v00 AS ta27229601 LEFT OUTER JOIN v00 AS ta27229602 CROSS JOIN v00 AS ta27229603 USING ( c01 ) ON TRUE <=> FALSE IN ( SELECT 'string' ) ) GROUP BY CASE WHEN FALSE <=> TRUE IN ( SELECT 'string' ) || FALSE OR TRUE <=> FALSE IN ( SELECT 'string' ) THEN TRUE END MOD CASE WHEN FALSE THEN FALSE END IS NOT TRUE;
SELECT *, TRUE <=> TRUE IN ( SELECT 'string' ) FROM v00 AS ta29677600 NATURAL LEFT JOIN ( v00 AS ta29677601 NATURAL RIGHT OUTER JOIN v00 AS ta29677602 ) LEFT JOIN v00 AS ta29677603 USING ( c02 ) WHERE FALSE <=> TRUE IN ( SELECT 'string' ) GROUP BY FALSE IN ( SELECT NOT TRUE OR TRUE <=> CASE FALSE WHEN FALSE THEN TRUE END + TIME ( - INTERVAL TRUE <=> FALSE IN ( SELECT 'string' ) MINUTE_SECOND + TRUE <=> FALSE IN ( SELECT FALSE <=> TRUE IN ( SELECT 'string' ) FROM v00 ) <=> FALSE IN ( SELECT 'string' ) ) ^ FALSE ^ CASE WHEN TRUE THEN TRUE END IN ( SELECT 'string' ) OR TRUE ) ORDER BY TRUE LIMIT ROWS EXAMINED 1234567890 LOCK IN SHARE MODE NOWAIT;
SELECT * FROM v00 AS ta27230900 NATURAL LEFT OUTER JOIN ( SELECT 'string' ) AS ta27230902 LEFT JOIN v00 AS ta27230901 USING ( c01 ) GROUP BY TRUE IS UNKNOWN;
SELECT * FROM ( SELECT NOT TRUE <=> TRUE IN ( SELECT 'string' ) ) ta29679500 GROUP BY NOT TRUE <=> TRUE IN ( SELECT ( SELECT 'string' ) * FALSE / TRUE % TRUE DIV LAST_VALUE ( FALSE <=> FALSE IN ( SELECT 'string' ) ) OVER ( PARTITION BY FALSE ROWS CURRENT ROW ) IS NOT NULL );
( SELECT * FROM v00 AS ta29680100 JOIN v00 AS ta29680101 CROSS JOIN ( v00 AS ta29680102 INNER JOIN v00 AS ta29680103 USING ( c01 ) ) RIGHT JOIN ( ( v00 AS ta29680104 INNER JOIN v00 AS ta29680105 USING ( c01 ), v00 AS ta29680106 ) ) LEFT OUTER JOIN v00 AS ta29680107 ON TRUE ON FALSE <=> FALSE IN ( SELECT NOT TRUE <=> FALSE NOT IN ( SELECT FALSE <=> TRUE IN ( SELECT 'string' ) FROM v00 AS ta29680111 ) ) LEFT JOIN v00 AS ta29680108 ON 'string' LEFT OUTER JOIN v00 AS ta29680109 RIGHT OUTER JOIN ( v00 AS ta29680110 ) ON FALSE ON NOT TRUE <=> FALSE IN ( SELECT 'string' ) ON FALSE <=> TRUE IN ( SELECT 'string' ) ON TRUE ) ORDER BY TRUE ASC LIMIT ROWS EXAMINED 1234567890 LOCK IN SHARE MODE SKIP LOCKED;
SELECT *, FALSE <=> TRUE IN ( SELECT 'string' ), TRUE FROM v00 AS ta29680300 CROSS JOIN v00 AS ta29680301;
SELECT * FROM ( v00 AS ta29680700 LEFT JOIN v00 AS ta29680701 ON FALSE <=> TRUE IN ( SELECT 'string' ) OR TRUE AND TRUE <=> FALSE NOT IN ( SELECT 'string' ) ) GROUP BY TRUE ORDER BY FALSE OR FALSE <=> FALSE IN ( SELECT 'string' ) || FALSE AND TRUE <=> FALSE IN ( SELECT 'string' ) ASC FETCH NEXT ROWS WITH TIES FOR UPDATE WAIT + 1234567890;
SELECT SQL_NO_CACHE TRUE <=> TRUE IN ( SELECT 'string' ), TRUE <=> FALSE IN ( SELECT 'string' ), FALSE FROM v00 HAVING TRUE <=> FALSE - TRUE + INTERVAL FALSE > WEIGHT_STRING ( TRUE <=> TRUE IN ( SELECT 'string' ) AS BINARY ( 1234567890 ) ) DAY_HOUR IN ( SELECT 'string' ) WINDOW no_window_name AS ( PARTITION BY FALSE, FALSE <=> FALSE IN ( SELECT 'string' ) ASC, FALSE <=> FALSE IN ( SELECT 'string' ) DESC );
SELECT * FROM v00 AS ta35559400 NATURAL LEFT JOIN v00 AS ta35559401 LEFT JOIN v00 AS ta35559402 USING ( c01 ) GROUP BY TRUE ASC, FALSE <=> TIMESTAMP ( - CASE WHEN FALSE THEN FALSE END - FALSE % CASE WHEN TRUE THEN FALSE ELSE FALSE END <=> FALSE IN ( SELECT 'string' ) ) IN ( SELECT - INTERVAL TRUE <=> TRUE IN ( SELECT 'string' ) HOUR_SECOND + FALSE + INTERVAL FALSE XOR TRUE <=> CASE WHEN TRUE THEN FALSE END & FALSE & FALSE IN ( SELECT 'string' ) HOUR_MINUTE <=> TRUE IN ( SELECT 'string' ) != FALSE );
SELECT * FROM ( SELECT FALSE <=> FALSE IN ( SELECT 'string' ) AND FALSE <=> TRUE IN ( SELECT 'string' ) ) ta35559600 GROUP BY NOT TRUE <=> TRUE IN ( SELECT ( SELECT TRUE <=> FALSE IN ( SELECT 'string' ) OR TRUE <=> FALSE IN ( SELECT 'string' ) ) * TRUE / - ~ CASE WHEN FALSE THEN FALSE ELSE TRUE END % TRUE DIV CONVERT ( FALSE <=> TRUE IN ( SELECT 'string' ), UNSIGNED INT ) IS NOT NULL );
SELECT TRUE <=> FALSE IN ( SELECT 'string' ) FROM ( v00 AS ta35560200 RIGHT JOIN v00 AS ta35560201 USING ( c02 ) ) GROUP BY TRUE ORDER BY TRUE <=> FALSE IN ( SELECT 'string' ) OR FALSE <=> TRUE IN ( SELECT 'string' ) DESC OFFSET 1234567890 ROW FOR UPDATE NOWAIT;
SELECT TRUE <=> COLUMN_ADD ( TRUE, FALSE, FALSE, TRUE <=> TRUE NOT IN ( SELECT 'string' ), FALSE <=> TRUE IN ( SELECT 'string' ) XOR TRUE AS DECIMAL ( 1234567890, 1234567890 ) ) & INTERVAL FALSE QUARTER + FALSE <=> TRUE IN ( SELECT 'string' ) IN ( SELECT TRUE <=> TRUE IN ( SELECT 'string' ) XOR TRUE && TRUE ) FROM v00, ( v00 AS ta35560401 LEFT OUTER JOIN v00 AS ta35560402 CROSS JOIN v00 AS ta35560403 USING ( c02 ) ON TRUE <=> FALSE IN ( SELECT 'string' ) ) GROUP BY CASE WHEN TRUE THEN TRUE END MOD CASE WHEN FALSE THEN FALSE END IS NOT TRUE;
SELECT * FROM ( v00 ) WHERE TRUE <=> FALSE IN ( SELECT 'string' ) WINDOW no_window_name AS ( ORDER BY FALSE, FALSE <=> TRUE IN ( SELECT 'string' ) DESC ROWS UNBOUNDED PRECEDING );
SELECT TRUE <=> FALSE IN ( SELECT 'string' ) FROM ( v00 AS ta35561400 NATURAL LEFT OUTER JOIN v00 AS ta35561401 LEFT OUTER JOIN v00 AS ta35561402 ON FALSE <=> TRUE IN ( SELECT 'string' ) RIGHT JOIN ( v00 AS ta35561403 LEFT OUTER JOIN v00 AS ta35561404 ON TRUE ) ON FALSE <=> FALSE IN ( SELECT TRUE <=> TRUE IN ( SELECT 'string' ) ) ) GROUP BY 'string' ORDER BY FALSE <=> FALSE IN ( SELECT - INTERVAL TRUE <=> FALSE IN ( SELECT 'string' ) HOUR_SECOND + TRUE <=> FALSE IN ( SELECT 'string' ) XOR FALSE <=> FALSE IN ( SELECT 'string' ) IS UNKNOWN ) DESC OFFSET 1234567890 ROWS FETCH NEXT 1234567890 ROWS ONLY FOR UPDATE NOWAIT;
( SELECT FALSE <=> FALSE IN ( SELECT 'string' ) FROM v00 );
CREATE TABLE v00 (c01 INT, c02 TEXT);
CREATE INDEX i03 ON v00 (c01);
INSERT INTO v00 (c01, c02) VALUES (0, 'abc');
CREATE TABLE IF NOT EXISTS v00 MIN_ROWS 1234567890 CONNECTION := 'string' IGNORE SELECT * FROM v00 AS ta35554701 NATURAL STRAIGHT_JOIN v00 AS ta35554702 RIGHT OUTER JOIN v00 AS ta35554703 NATURAL LEFT OUTER JOIN v00 AS ta35554704 ON FALSE <=> TRUE NOT IN ( ( SELECT * FROM v00 ) LIMIT IDENT . IDENT_QUOTED OFFSET 1234567890 ROWS EXAMINED 1234567890 ) AND FALSE <=> FALSE IN ( SELECT 'string' ) || TRUE ORDER BY TRUE ASC, FALSE <=> FALSE IN ( SELECT 'string' ) FOR UPDATE;
CREATE TABLE IF NOT EXISTS v00 MIN_ROWS 1234567890 CONNECTION := 'string' IGNORE SELECT * FROM v00 AS ta35554701 NATURAL STRAIGHT_JOIN v00 AS ta35554702 RIGHT OUTER JOIN v00 AS ta35554703 NATURAL LEFT OUTER JOIN v00 AS ta35554704 ON FALSE <=> TRUE NOT IN ( SELECT 'string' ) AND FALSE <=> FALSE IN ( SELECT 'string' ) || TRUE ORDER BY TRUE ASC, FALSE <=> FALSE IN ( SELECT 'string' ) FOR UPDATE;
CREATE TABLE IF NOT EXISTS v00 STORAGE DISK IGNORE SELECT * FROM v00 AS ta29673400 CROSS JOIN v00 AS ta29673401 NATURAL LEFT OUTER JOIN v00 AS ta29673402 NATURAL RIGHT JOIN ( v00 AS ta29673403 LEFT JOIN v00 AS ta29673404 ON FALSE ) ORDER BY TRUE <=> TRUE IN ( SELECT 'string' ) ASC, FALSE <=> FALSE IN ( SELECT 'string' ) FOR UPDATE;
ALTER SEQUENCE IF EXISTS sequence_name_0 RESTART NOMINVALUE;
INSERT LOW_PRIORITY IGNORE v00 SET c02 = FALSE <=> TRUE IN ( SELECT 'string' ) ON DUPLICATE KEY UPDATE c02 = DEFAULT RETURNING VALUE ( c02 ) + FALSE ^ + INTERVAL FALSE - INTERVAL TRUE YEAR_MONTH / CASE TRUE WHEN FALSE <=> FALSE IN ( SELECT 'string' ) XOR TRUE <=> TRUE IN ( SELECT 'string' ) XOR FALSE THEN FALSE END <=> FALSE IN ( SELECT 'string' ) YEAR_MONTH + NOT TRUE && TRUE <=> FALSE NOT IN ( SELECT 'string' ) <=> FALSE IN ( SELECT 'string' );

CREATE TABLE t (c1 INT,c2 TEXT);
INSERT t SET c2=1 ON DUPLICATE KEY UPDATE c2=DEFAULT RETURNING VALUE (c2)+1;

CREATE TABLE t (c1 INT,c2 TEXT) ENGINE=MyISAM;
INSERT t SET c2=1 ON DUPLICATE KEY UPDATE c2=DEFAULT RETURNING VALUE (c2)+1;
