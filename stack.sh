#!/bin/bash
set +H  # Disables history substitution and avoids  -bash: !: event not found  like errors
SCRIPT_PWD=$(dirname $(readlink -f "${0}"))
RANDOM=$(date +%s%N | cut -b10-19 | sed 's|^[0]\+||')  # Random entropy init
RANDF=$(echo $RANDOM$RANDOM$RANDOM$RANDOM | sed 's|.\(..........\).*|\1|')  # Random 10 digits filenr

# Call the version check helper script to set the following vars:
# BIN, SOURCE_CODE_REV, SVR, SERVER_VERSION, BUILD_TYPE, MDG
# Note: this helper script find/call code is universal; it will works for/from all scripts
if [ -r "${SCRIPT_PWD}/../version_chk_helper.source" ]; then
  source "${SCRIPT_PWD}/../version_chk_helper.source"
elif [ -r "${SCRIPT_PWD}/version_chk_helper.source" ]; then
  source "${SCRIPT_PWD}/version_chk_helper.source"
else
  echo "Assert: version_chk_helper.source not found/readable by this script ($0)"
  exit 1
fi

if [ "${MDG}" -eq 1 ]; then
  CORE_COUNT=$(ls --color=never node*/*core* 2>/dev/null | wc -l)
else
  CORE_COUNT=$(ls --color=never data*/*core* var/log/*/*/data/*core* var/*/log/*/*/data/*core* var/mysqld*/data/*core* 2>/dev/null | wc -l)
fi
if [ ${CORE_COUNT} -eq 0 ]; then
  echo "INFO: no cores found at data*/*core* nor at node*/*core*"
  exit 1
elif [ ${CORE_COUNT} -gt 1 ]; then
  echo "Assert: too many (${CORE_COUNT}) cores found at data*/*core* and/or node*/*core*"
  exit 1
fi

if [ "${MDG}" -eq 1 ]; then
  ERROR_LOG=$(ls --color=never node*/node*.err 2>/dev/null | head -n1)  # This is not perfect in case node2 or node3 crashes TODO
else
  ERROR_LOG=$(ls --color=never log/master.err log/slave.err var/log/mysqld.2.err var/log/mysqld.1.err 2>/dev/null | sort -R | head -n1)  # sort -R: Slave log first, if present (as often the slave asserts). This by itself is not perfect given that there may be an order difference. This was fixed by [1] below (search for '[1]'). Likely something similar can be done for MDG
fi
if [ ! -z "${ERROR_LOG}" ]; then
  #echo "----${ERROR_LOG} "  # Debug
  ASSERT="$(grep --binary-files=text -m1 'Assertion.*failed.$' ${ERROR_LOG} | head -n1)"
  #echo "----${ASSERT}"  # Debug
  if [ -z "${ASSERT}" ]; then
    ASSERT="$(grep --binary-files=text -m1 'Failing assertion:' ${ERROR_LOG} | head -n1)"
  fi
  if [ ! -z "${ASSERT}" ]; then
    echo -e "{noformat:title=${SVR} ${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE} ${BUILD_DATE}}\n${ASSERT}\n{noformat}\n"
  fi
fi

# Note that no 'head -n1' or similar is needed here, as the script will terminate if >1 core is found (ref code above)
LATEST_CORE=
if [ "${MDG}" -eq 1 ]; then
  LATEST_CORE="$(ls -t --color=never node*/*core* 2>/dev/null)"
else
  LATEST_CORE="$(ls -t --color=never data*/*core* var/log/*/*/data/*core* var/*/log/*/*/data/*core* var/mysqld*/data/*core* 2>/dev/null)"
fi

# Ref [1] above
# Match the MTR error log used with the m/s core used, if/when mismatched (for example when both m+s crash and one dir is deleted to debug the other with tt etc.)
# As we already have a core in mysqld.1 or mysqld.2 we can safely change mysqld.2 or mysqld.1 to mysqld.1 and mysqld.2 respectively
if [[ "${LATEST_CORE}" == *"mysqld.1"* ]]; then
  ERROR_LOG="$(echo "${ERROR_LOG}" | sed 's|mysqld.2|mysqld.1|')"
elif [[ "${LATEST_CORE}" == *"mysqld.2"* ]]; then
  ERROR_LOG="$(echo "${ERROR_LOG}" | sed 's|mysqld.1|mysqld.2|')"
fi
# Idem for non-MTR runs, i.e. standard BASEDIR 'str' runs
if [[ "${LATEST_CORE}" == *"data_slave"* ]]; then
  ERROR_LOG="$(echo "${ERROR_LOG}" | sed 's|master.err|slave.err|g')"
elif [[ "${LATEST_CORE}" == *"data/core"* ]]; then
  ERROR_LOG="$(echo "${ERROR_LOG}" | sed 's|slave.err|master.err|g')"
fi
#echo "DEBUG: err: ${ERROR_LOG} | core: ${LATEST_CORE}"
# TODO: MDG needs similar code for node1/2/3

gdb -q ${BIN} ${LATEST_CORE} >/tmp/${RANDF}.gdba 2>&1 << EOF
 set pagination off
 set print pretty on
 set print frame-arguments all
 bt
 quit
EOF

# Update March/April 24: a system update now renders stacks as
#10 0x0000562e73a837b4 in mysql_admin_table (thd=thd@entry=0x152110000d58,
#    tables=tables@entry=0x152110016ac0,
#    ...
#    at /test/preview-11.5-preview_dbg/sql/sql_admin.cc:1116
# The awk below fixes this by moving everything back into single lines
# Also changed in bug_report.sh

if [ -r /tmp/${RANDF}.gdba ]; then
  echo "{noformat:title=${SVR} ${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE} ${BUILD_DATE}}"
  # The next line is duplicated in bug_report.sh, update both if changing one
  grep --binary-files=text -A999 'Core was generated by' /tmp/${RANDF}.gdba | grep --binary-files=text -v 'No such file or directory' | sed 's|(gdb) (gdb) |(gdb) bt\n|' | sed 's|(gdb) (gdb) ||' | awk '{ if(/^    /) printf("%s", substr($0, 5)); else if(NR > 1) printf("\n%s", $0); else printf("%s", $0); } END { printf("\n"); }' | grep --binary-files=text -v '^(gdb)[ \t]*$' | grep --binary-files=text -viE 'Downloading source file|Download failed'
  rm -f /tmp/${RANDF}.gdba
else
  echo "Assert: /tmp/${RANDF}.gdba not found after gdb was called"
  exit 1
fi
echo '{noformat}'
