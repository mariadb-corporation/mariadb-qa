#!/bin/bash
# Created by Roel Van de Paar, MariaDB

# This helper script is sourced by other scripts (stack.sh, bug_report.sh and myver) and avoids code duplication in those scripts
# As it is sourced rather than executed, it does not need +x

MDG=0
if [ ! -z "$(ls --color=never ./node*/node*.err 2>/dev/null)" ]; then
  MDG=1
fi

if [ ! -z "${BIN}" ]; then
  if [ ! -x "${BIN}" ]; then
    BIN=
  fi
fi

POTENTIAL_MYSQLD=
if [ -r ./bin/mariadbd -a ! -d ./bin/mariadbd ]; then
  BIN="./bin/mariadbd"
elif [ -r ./bin/mysqld -a ! -d ./bin/mysqld ]; then  # For direct use in BASEDIR, like ~/tt
  BIN="./bin/mysqld"
elif [ -r ./mariadbd -a ! -d ./mariadbd ]; then  # Ported from previous version of myver script
  BIN="./mariadbd"
elif [ -r ./mysqld -a ! -d ./mysqld ]; then  # Ported from previous version of myver script
  BIN="./mysqld"
elif [ -r ./mysqld/mariadbd -a ! -d ./mysqld/mariadbd ]; then  # Exec from within workdir root
  BIN="./mysqld/mariadbd"
elif [ -r ./mysqld/mysqld -a ! -d ./mysqld/mysqld ]; then  # Exec from within workdir root
  BIN="./mysqld/mysqld"
elif [ -r ../bin/mariadbd -a ! -d ../bin/mariadbd ]; then  # Handy when myver is being executed from the mysql-test dir
  BIN="../bin/mariadbd"
elif [ -r ../bin/mysqld -a ! -d ../bin/mysqld ]; then  # Handy when myver is being executed from the mysql-test dir
  BIN="../bin/mysqld"
elif [ -r ../mariadbd -a ! -d ../mariadbd ]; then  # Not currently used, but provisioned alike to ~/t
  BIN="../mariadbd"
elif [ -r ../mysqld -a ! -d ../mysqld ]; then  # Not currently used, but provisioned alike to ~/t
  BIN="../mysqld"
elif [ -r ../mysqld/mariadbd -a ! -d ../mysqld/mariadbd ]; then  # For direct use inside trial directories
  BIN="../mysqld/mariadbd"
elif [ -r ../mysqld/mysqld -a ! -d ../mysqld/mysqld ]; then  # For direct use inside trial directories
  BIN="../mysqld/mysqld"
elif [ -r ../../bin/mariadbd -a ! -d ../../bin/mariadbd ]; then
  BIN="../../bin/mariadbd"
elif [ -r ../../bin/mysqld -a ! -d ../../bin/mysqld ]; then
  BIN="../../bin/mysqld"
elif [ -r ./log/master.err ]; then
  POTENTIAL_MYSQLD="$(grep "ready for connections" ./log/master.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -x ${POTENTIAL_MYSQLD} ]; then BIN="${POTENTIAL_MYSQLD}"; fi
elif [ -r ./log/slave.err ]; then
  POTENTIAL_MYSQLD="$(grep "ready for connections" ./log/slave.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -x ${POTENTIAL_MYSQLD} ]; then BIN="${POTENTIAL_MYSQLD}"; fi
elif [ -r ./node1/node1.err ]; then
  POTENTIAL_MYSQLD="$(grep "ready for connections" ./node1/node1.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -x ${POTENTIAL_MYSQLD} ]; then BIN="${POTENTIAL_MYSQLD}"; fi
elif [ -r ./node2/node2.err ]; then
  POTENTIAL_MYSQLD="$(grep "ready for connections" ./node2/node2.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -x ${POTENTIAL_MYSQLD} ]; then BIN="${POTENTIAL_MYSQLD}"; fi
elif [ -r ./node3/node3.err ]; then
  POTENTIAL_MYSQLD="$(grep "ready for connections" ./node3/node3.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -x ${POTENTIAL_MYSQLD} ]; then BIN="${POTENTIAL_MYSQLD}"; fi
fi
POTENTIAL_MYSQLD=

if [ -z "${BIN}" ]; then
  echo "Assert: mysqld/mariadbd not found in any location (checked ./bin/mysqld, ../mysqld, ../mysqld/mysqld and their mariadbd alternatives, as well as other potential locations extracted from any logs at ./log/master.err or ./node1/node1.err)"
  exit 1
fi

if [ -r "${SCRIPT_PWD}/source_code_rev.sh" ]; then
  SOURCE_CODE_REV="$(${SCRIPT_PWD}/source_code_rev.sh)"
elif [ -r "${SCRIPT_PWD}/../source_code_rev.sh" ]; then
  SOURCE_CODE_REV="$(${SCRIPT_PWD}/../source_code_rev.sh)"
elif [ -r "${HOME}/mariadb-qa/source_code_rev.sh" ]; then
  SOURCE_CODE_REV="$(${HOME}/mariadb-qa/source_code_rev.sh)"
else
  SOURCE_CODE_REV='unknown'
fi
SVR=''  # ES,CS,MS
if [ "$(echo "${PWD}" | grep -o EMD | head -n1)" == "EMD" -o "$(grep "BASEDIR" --binary-files=text ./start 2>/dev/null | grep -o 'EMD' | head -n1)" == "EMD" -o "$(grep --binary-files=text -io "BASEDIR.*" pquery-run.log 2>/dev/null | grep -o 'EMD' | head -n1)" == "EMD" ]; then
  if [ -x "${BIN}" ]; then
    SERVER_VERSION="$(${BIN} --version | grep -om1 --binary-files=text '[0-9\.]\+-[0-9]\+-MariaDB' | sed 's|-MariaDB||')"
  fi
  SVR='ES'
elif [ "$(echo "${PWD}" | grep -o MD | head -n1)" == "MD" -o "$(grep "BASEDIR" --binary-files=text ./start 2>/dev/null | grep -o 'MD' | head -n1)" == "MD" -o "$(grep --binary-files=text -io "BASEDIR.*" pquery-run.log 2>/dev/null | grep -o 'MD' | head -n1)" == "MD" ]; then
  if [ -x "${BIN}" ]; then
    SERVER_VERSION="$(${BIN} --version | grep -om1 --binary-files=text '[0-9\.]\+-MariaDB' | sed 's|-MariaDB||')"
  fi
  SVR='CS'
elif [ "$(echo "${PWD}" | grep -o MS | head -n1)" == "MS" -o "$(grep "BASEDIR" --binary-files=text ./start 2>/dev/null | grep -o 'MS' | head -n1)" == "MS" -o "$(grep --binary-files=text -io "BASEDIR.*" pquery-run.log 2>/dev/null | grep -o 'MS' | head -n1)" == "MS" ]; then
  if [ -x "${BIN}" ]; then
    SERVER_VERSION="MySQL $(pwd | grep -o 'mysql-[\.0-9]\+' | sed 's|mysql-||')"
  fi
  SVR='MS'
fi
SERVER_VERSION="$(echo "${SERVER_VERSION}" | tr -d ' ')"
MDEV_OR_MENT="$(echo "${PWD}" | grep -Eo 'MDEV[-_0-9]+|MENT[-_0-9]+' | sed 's|^[-_]||;s|[-_]$||;s|_|-|g' | tr -d ' ')"
if [ -z "${MDEV_OR_MENT}" ]; then  # If we are currently not in BASEDIR but for example in /data/some_work_dir[/some_trial]. The trial subdir is handled by the grep in './start' and the some_work_dir is handled by grep in './pquery*run*.conf'
  TRIAL_BASEDIR="$(grep "^[ \t]*BASEDIR" ./start ./pquery*run*.conf 2>/dev/null | head -n1)"
  BUILD_DATE="$(pwd | grep -o 'MD[0-3][0-9][0-1][0-9][2-9][0-9]\-' | grep -o '[0-9]\+')"
  if [ ! -z "${TRIAL_BASEDIR}" ]; then
    MDEV_OR_MENT="$(echo "${TRIAL_BASEDIR}" | grep -Eo 'MDEV[-_0-9]+|MENT[-_0-9]+' | sed 's|^[-_]||;s|[-_]$||;s|_|-|g' | tr -d ' ')"
  fi
  TRIAL_BASEDIR=
fi
if [ ! -z "${MDEV_OR_MENT}" ]; then
  NR="$(echo "${MDEV_OR_MENT}" | grep -o '[0-9]\+')"
  if [ ! -z "$(echo "${NR}" | sed 's|^[0-9]||;s|^[0-9]||')" ]; then  # At least 3 long
    BB="$(ls -d /test/bb*${NR}* 2>/dev/null | head -n1 | sed 's|_dbg||;s|_opt||;s|/test/||')"
    if [ ! -z "${BB}" ]; then
      SVR="${BB} ${SVR}"
    else
      SVR="${MDEV_OR_MENT} ${SVR}"
    fi
  else
    SVR="${MDEV_OR_MENT} ${SVR}"
  fi
  NR=
fi
MDEV_OR_MENT=

BUILD_TYPE=
DIRFILTER='s|/mysql-test$||;s|/mariadb-test$||;s|/bin$||'
LAST_THREE="$(echo "${PWD}" | sed "${DIRFILTER}" | sed 's|.*\(...\)$|\1|')"
if [ "${LAST_THREE}" != "dbg" -a "${LAST_THREE}" != "opt" ]; then  # in-trial ./stack call
  if [ "${MDG}" -eq 1 ]; then
    LAST_THREE="$(grep --binary-files=text -Eoh "\-dbg|\-opt" ./node*/node*.err 2>/dev/null | head -n1 | sed 's|\-||')"
  else 
    LAST_THREE="$(grep --binary-files=text -Eoh "\-dbg|\-opt" ./log/master.err ./var/log/mysqld.*.err 2>/dev/null | head -n1 | sed 's|\-||')"
  fi 
fi
if [ "${LAST_THREE}" != "dbg" -a "${LAST_THREE}" != "opt" ]; then  # in-trial ./stack call for ES
  LAST_THREE="$(grep --binary-files=text -oh "BASEDIR.*\-[do][bp][gt]" start 2>/dev/null | grep --binary-files=text -Eoh "\-dbg|\-opt" | head -n1 | sed 's|\-||')"
fi
SAN="$(echo "${PWD}" | sed "${DIRFILTER}" | sed 's|.*/||' | grep -o '[UBAT]\+SAN')"
if [ -z "${SAN}" ]; then
  if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized)"; fi
  if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug)"; fi
else
  if grep -qi 'COMPILER=/[^ ]\+clang' BUILD_CMD_CMAKE 2>/dev/null; then
    if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized, ${SAN}, Clang)"; fi
    if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug, ${SAN}, Clang)"; fi
  else  # GCC, or no BUILD_CMD_CMAKE to check, or any other issue
    if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized, ${SAN})"; fi
    if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug, ${SAN})"; fi
  fi
fi
if [ -z "${BUILD_TYPE}" -a -r ./BUILD_CMD_CMAKE ]; then
  if ! grep -qi '=Debug' ./BUILD_CMD_CMAKE 2>/dev/null; then
    if [ -z "${SAN}" ]; then BUILD_TYPE=" (Optimized)"; else BUILD_TYPE=" (Optimized, ${SAN})"; fi
  else
    if [ -z "${SAN}" ]; then BUILD_TYPE=" (Debug)"; else BUILD_TYPE=" (Debug, ${SAN})"; fi
  fi
fi
if [ -z "${BUILD_TYPE}" -a -x "${BIN}" ]; then
  if [ "$(${BING} --help 2>&1 | head -n1 | grep -o "\-debug")" == "-debug" ]; then
    BUILD_TYPE=" (Debug)";
  else
    BUILD_TYPE=" (Optimized)";
  fi
fi
BUILD_DATE="$(pwd | grep -o 'M[DS][0-3][0-9][0-1][0-9][2-9][0-9]\-' | grep -o '[0-9]\+')"
if [ "$(echo "${BUILD_DATE}" | sed 's|[0-9]|t|g')" == "tttttt" ]; then  # Check if pwd grep result is as expected
  BUILD_DATE_SHORT="${BUILD_DATE}"
  BUILD_DATE="$(echo "${BUILD_DATE}" | sed 's|\(..\)\(..\)\(..\)|\1/\2/20\3|;s|^|Build |;s|$||')"  # Format to dd/mm/20yy
else
  BUILD_DATE=''
fi
if [ -z "${BUILD_DATE}" ]; then  # possibly a in-trial ./stack call
  TRIAL_BASEDIR="$(grep "^[ \t]*BASEDIR" ./start ./pquery*run*.conf 2>/dev/null | head -n1)"
  BUILD_DATE="$(echo "${TRIAL_BASEDIR}" | grep -o 'M[DS][0-3][0-9][0-1][0-9][2-9][0-9]\-' | grep -o '[0-9]\+')"
  BUILD_DATE_SHORT="${BUILD_DATE}"
  if [ "$(echo "${BUILD_DATE}" | sed 's|[0-9]|t|g')" == "tttttt" ]; then  # Check if pwd grep result is as expected
    BUILD_DATE="$(echo "${BUILD_DATE}" | sed 's|\(..\)\(..\)\(..\)|\1/\2/20\3|;s|^|Build |;s|$||')"  # Format to dd/mm/20yy
  else
    BUILD_DATE=''
  fi
fi

BUILD_TYPE_SHORT="${LAST_THREE}"

# Clear non-needed vars
LAST_THREE=
SAN=
