#!/bin/bash
# Created by Ramesh Sivaraman and Roel Van de Paar, MariaDB

USER="$(whoami)"
set +H

if [ ! -d /test/TESTCASES -o ! -d /data/NEWBUGS ]; then
  sudo mkdir -p /test /data /test/TESTCASES/ /data/NEWBUGS /data/tmp
  sudo chown -R ${USER}:${USER} /test
  sudo chown -R ${USER}:${USER} /data
  sudo chmod -R +rX /test
  sudo chmod -R +rX /data
fi

# Squirrel/AFL
# mariadb-qa/squirrel: a copy of the squirrel repo, with modified code (for example afl-fuzz.c) for MariaDB QA
# mariadb-qa/fuzzing: files, script, binaries required for fuzzing (binaries compiled from mariadb-qa/squirrel/MariaDB/AFL)
# /home/${USER}/fuzzing: fully and automatically created by this script with symlinks to all required files in mariadb-qa
# fuzzing_root: created as /home/${USER}/fuzzing/fuzzing_root by this script (if not present yet): contains grammar files
# See https://github.com/s3team/Squirrel/issues/11 for more information on grammar creation and related topics
mkdir -p /home/${USER}/fuzzing/fuzzing_root/ /home/${USER}/fuzzing/newbugs
ln -fs /home/${USER}/mariadb-qa/fuzzer/go /home/${USER}/fuzzing/fuzzing_root/go 2>&1
ln -fs /home/${USER}/mariadb-qa/fuzzer/README /home/${USER}/fuzzing/README
ln -fs /home/${USER}/mariadb-qa/fuzzer/SETUP /home/${USER}/fuzzing/SETUP
ln -fs /home/${USER}/mariadb-qa/fuzzer/PROCEDURE /home/${USER}/fuzzing/PROCEDURE
ln -fs /home/${USER}/mariadb-qa/fuzzer/start_fuzzing /home/${USER}/fuzzing/start_fuzzing
ln -fs /home/${USER}/mariadb-qa/fuzzer/del_known_bugs /home/${USER}/fuzzing/del_known_bugs
ln -fs /home/${USER}/mariadb-qa/fuzzer/list_unique_bugs_seen /home/${USER}/fuzzing/list_unique_bugs_seen
ln -fs /home/${USER}/mariadb-qa/fuzzer/reports /home/${USER}/fuzzing/reports
ln -fs /home/${USER}/mariadb-qa/fuzzer/find_uniqueid /home/${USER}/fuzzing/find_uniqueid
ln -fs /home/${USER}/mariadb-qa/fuzzer/queue_stats /home/${USER}/fuzzing/queue_stats
ln -fs /home/${USER}/mariadb-qa/fuzzer/process_testcases /home/${USER}/fuzzing/process_testcases
ln -fs /home/${USER}/mariadb-qa/fuzzer/process_testcases_loop /home/${USER}/fuzzing/process_testcases_loop
ln -fs /home/${USER}/mariadb-qa/fuzzer/clean_queues /home/${USER}/fuzzing/clean_queues
ln -fs /home/${USER}/mariadb-qa/fuzzer/check_loops /home/${USER}/fuzzing/check_loops
ln -fs /home/${USER}/mariadb-qa/fuzzer/stop_all_fuzzing /home/${USER}/fuzzing/stop_all_fuzzing
ln -fs /home/${USER}/mariadb-qa/fuzzer/stop_process_testcases /home/${USER}/fuzzing/stop_process_testcases
ln -fs /home/${USER}/mariadb-qa/fuzzer/stop_reducers_run /home/${USER}/fuzzing/stop_reducers_run
ln -fs /home/${USER}/mariadb-qa/fuzzer/reducers_run /home/${USER}/fuzzing/reducers_run
ln -fs /home/${USER}/mariadb-qa/fuzzer/reducers_run_loop /home/${USER}/fuzzing/reducers_run_loop
# The ./afl script for BASEDIRs is auto-linked by ~/start, and here it is also linked into ~/fuzzing for editing convience
ln -fs /home/${USER}/mariadb-qa/fuzzer/afl /home/${USER}/fuzzing/afl
for ((i=0;i<10;i++)); do
  ln -fs /home/${USER}/mariadb-qa/fuzzer/afl${i}-fuzz /home/${USER}/fuzzing/afl${i}-fuzz
done
# Setup a default/usable fuzzing_root if does not exist yet
if [ ! -d /home/${USER}/fuzzing/fuzzing_root/init_lib ]; then
  cp -r /home/${USER}/mariadb-qa/squirrel/MariaDB/docker/init_lib /home/${USER}/fuzzing/fuzzing_root/
  cp -r /home/${USER}/mariadb-qa/squirrel/MariaDB/docker/input /home/${USER}/fuzzing/fuzzing_root/
  cp /home/${USER}/mariadb-qa/squirrel/MariaDB/docker/global_data_lib_mysql /home/${USER}/fuzzing/fuzzing_root/global_data_lib_mysql
  # Apparently this file is not required, ref https://github.com/s3team/Squirrel/issues/11
  # However, it is used in the code (ref afl-fuzz.c):
  # #define SAFE_GENERATE_PATH "./safe_generate_type_mysql"
  # g_mutator.init_safe_generate_type(SAFE_GENERATE_PATH);
  cp /home/${USER}/mariadb-qa/squirrel/MariaDB/docker/safe_generate_type_mysql /home/${USER}/fuzzing/fuzzing_root/safe_generate_type_mysql
fi

# Homedir scripts
rm -f ~/tcp ~/pge ~/pg ~/tr ~/tc ~/t ~/fc ~/mcl ~/s ~/st ~/li
ln -fs /home/${USER}/mariadb-qa/homedir_scripts/* /home/${USER}/ 2>&1
ln -fs /home/${USER}/mariadb-qa/testcase_prettify.sh /home/${USER}/tcp 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-goexp-patch.sh /home/${USER}/pge 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-goexp-patch.sh /home/${USER}/depge 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-go-expert.sh /home/${USER}/pg 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-todays-runs.sh /home/${USER}/tr 2>&1
ln -fs /home/${USER}/mariadb-qa/copy_testcases.sh /home/${USER}/tc 2>&1
ln -fs /home/${USER}/mariadb-qa/new_text_string.sh /home/${USER}/t 2>&1
ln -fs /home/${USER}/mariadb-qa/find_cause.sh /home/${USER}/fc 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-allsubdir-del-string.sh /home/${USER}/mcl 2>&1
ln -fs /home/${USER}/mariadb-qa/pquery-screen.sh /home/${USER}/s 2>&1
ln -fs /home/${USER}/mariadb-qa/san_text_string.sh /home/${USER}/st 2>&1
ln -fs /home/${USER}/mariadb-qa/linkit /home/${USER}/li 2>&1

# Build scripts (mostly/mainly used from /test)
ln -fs /home/${USER}/mariadb-qa/mariadb-build-qa/* /test/ 2>&1
ln -fs /home/${USER}/mariadb-qa/mariadb-build-qa/* /data/ 2>&1
ln -fs /home/${USER}/mariadb-qa/mariadb-build-qa/current_runs_testcases /home/${USER}/crt 2>&1
rm -f /data/[odut][0-9]  # Remove changedir scripts (like '. ./d7' etc.) normally only used in /test

# Mass testcase scripts
ln -fs /home/${USER}/mariadb-qa/testcase-scripts/* /test/TESTCASES/ 2>&1
ln -fs /home/${USER}/mariadb-qa/newbugs/uniq_newbugs /test/TESTCASES/uniq_newbugs 2>&1

# Newbugs (new bugs found by reducer while reducing) & Fireworks nwebugs & Fuzzing newbugs
ln -fs /home/${USER}/mariadb-qa/newbugs/* /data/NEWBUGS/ 2>&1
ln -fs /home/${USER}/mariadb-qa/mariadb-build-qa/clean_newbugs /data/NEWBUGS/clean_newbugs 2>&1
ln -fs /home/${USER}/mariadb-qa/newbugs/* /home/${USER}/fuzzing/newbugs 2>&1
ln -fs /home/${USER}/mariadb-qa/mariadb-build-qa/clean_newbugs /home/${USER}/fuzzing/newbugs/clean_newbugs 2>&1

# Link ~/BUGS to ~/mariadb-qa/BUGS for ease-of-access
if [ ! -d /home/${USER}/BUGS ]; then
  ln -fs /home/${USER}/mariadb-qa/BUGS /home/${USER}/BUGS 2>&1
fi

# Add any bugs not commited yet
cd /home/${USER}/mariadb-qa/BUGS
git add *

# Create REGEX_EXCLUDE if it does not exist yet, adding some common defaults
if [ ! -r /test/REGEX_EXCLUDE ]; then 
  echo 'MDEV|VALGRIND' > /test/REGEX_EXCLUDE
fi

# Protect homedir links which are easily overwritten by mistake
chmod -w ~/b ~/c ~/i ~/m ~/o ~/p ~/r

# Suggest alias'es (Search key: Mac)
# If you run into issues with predefined system commands try
# grep '^alias' ~/.bashrc |sed 's|alias ||;s|=.*||' | xargs -I{} ls /bin/{} 2>/dev/null  # Ignore start of output
# grep '^alias' ~/.bashrc |sed 's|alias ||;s|=.*||' | xargs -I{} ls /usr/bin/{} 2>/dev/null
# To find possible culprits. Also note things like 'fi' cannot be redefined
echo "You can now add a list of helpful alias'es to the end of your ~/.bashrc script, by doing:"
echo "
alias a='./all'      # Start kill>wipe>start>cl in current BASEDIR
alias all='./all'    # Idem
alias cl='~/cl'      # Run ~/mariadb-qa/pquery-clean-known.sh for the current (pquery) workdir
alias c='cat '       # cat (display) a file (pass file name)
alias k='clear'      # Clear screen
alias b='~/b'        # Start bug report for in.sql in current BASEDIR
alias bs='~/b SAN'   # Start SAN based bug report for in.sql in current BASEDIR
alias bd='screen -admS \"dbg_build\" bash -c \"~/mariadb-qa/build_mdpsms_dbg.sh; bash\"; screen -d -r dbg_build'  # Start a debug build for the current sourcedir (ref /test/clone.sh)
alias bo='screen -admS \"opt_build\" bash -c \"~/mariadb-qa/build_mdpsms_opt.sh; bash\"; screen -d -r opt_build'  # Idem, optimized build
alias ba='screen -admS \"opt_and_dbg_build\" bash -c \"~/mariadb-qa/build_mdpsms_opt.sh & sleep 90; ~/mariadb-qa/build_mdpsms_dbg.sh; bash\"; screen -d -r opt_and_dbg_build'  # Idem, both
alias ca='cd /data; ./clean_all'  # Goes through all workdirs, deleting all [recently] added known bugs'
alias gc='git commit -a -m '  # Commit to git with a given message (pass quoted message)
alias gs='git status'  # Show git status of current directory
alias gp='git push'  # Push to git repository
alias pr='~/pr'      # pquery-results for current workdir
alias t='~/t'        # UniqueID (works in BASEDIRs, and in workdir/trial dirs etc)
alias tt='~/tt'      # UniqueID + known bugs scan + JIRA URL scan links
alias sr='~/sr '     # Start reducer for a given trial (pass trial number)
alias pg='~/pg'      # Start pquery-go-expert for current workdir
alias pge='~/pge '   # Start pquery-goexp-patch for a given trial (pass trial number)
alias pga='~/pg_all' # Start new pquery-go-expert runs for all workdirs
alias pgar='~/pg_all REGEN' # Not often used. Regenerate all reducer scripts for all workdirs (resource intensive)
alias s='~/s '       # Reconnect to given screen (pass start of screen name, or 's{trialnr}'), list screens
alias sc='~/sc'      # Check if the current bash session is running inside a screen
alias sg='screen -list | grep '  # List screens that match a search pattern (pass quoted search pattern)
alias sb='source ~/.bashrc' # Re-source ~/.bashrc, handy to use when this alias list was updated
alias st='~/start'   # Prepare a BASEDIR with all runtime scripts for it
alias d='cd /test;. ./d1'  # cd to the latest debug 10.11 in /test
alias o='cd /test;. ./o1'  # cd to the latest optimized 10.11 in /test
alias ds='cd /test;. ./u1'   # cd to the latest UBASAN debug 10.11 in /test
alias os='cd /test;. ./uo1'  # cd to the latest UBASANoptimized 10.11 in /test
alias i='~/i '       # Information about any trial in current workdir (pass trial number)
alias ii='~/ii'      # Information about the current (pquery framework) workdir
alias in='vi in.sql' # Edit ./in.sql in a BASEDIR for example (usable with many other scripts in BASEDIR and home)
alias r='cd /data; timeout 120s ./results'  # Show results from workdirs in results.list (ref ~/gomd), stop at 120s
alias g='cd /test;./gendirs.sh'  # cd to test and run gendirs.sh (dirs which will be used in ~/b and d/o scripts)
alias gsan='cd /test;./gendirs.sh san'  # Idem, but for SAN builds
alias da='cd /data'  # cd to /data where all workdirs live
alias ct='cd /test'  # cd to /test where all BASEDIRs/builds live
alias cm='cd ~/mariadb-qa'  # cd to ~/mariadb-qa where all testing code lives
alias cf='cd ~/fuzzing'     # cd to ~/fuzzing where all fuzzing results live
alias eb='~/eb '     # Edit bug SQL (pass bug number, the numbers are sufficient but you can use MENT or MDEV)
alias dt='~/dt '     # Delete a pquery trial in a WORKDIR (pass trial number)
alias kb='~/kb'      # Open the known bugs (knownbugs.list) file for editing
alias kba='~/kba'    # Open the known SAN bugs (knownbugs.list.SAN) file for editing
alias kbs='~/kbs '   # Search through all known bug UniqueID's (pass search string, for example a quoted UniqueID)
alias kbsa='~/kbsa ' # Search through all known SAN bug UniqueID's (pass search string, for example a quoted UniqueID)
alias mul='./multirun_loop'  # From a BASEDIR, loop in.sql till a core is found (handy for SHUTDOWN based issues)
alias mu='./multirun'  # From a BASEDIR, loop in.sql till a crash is observed 
alias mup='./multirun_pquery'  # From a BASEDIR, loop in.sql, using pquery, till a crash is observed
alias my='./my'      # List simplified testcases in current (pquery) workdir
alias gdb='./gdb'    # Start gdb in the current BASEDIR or trial dir, assuming there is a core in /data
alias stack='./stack'  # Produce a stack for the core in /data (run from within a BASEDIR or trial dir)
alias as='cd /test; ./allstrings'  # Show UniqueID's per version after running ~/b (b)
alias asm='cd /test; ./allstrings_merged'  # Show a list of merged UniqueID's seen after running ~/b (b)
alias asn='cd /test; ./allstrings_new'  # Show a list of new, merged, UniqueID's after running ~/b (b)
alias vl='vi ./log/master.err'  # Open the error log in a BASEDIR
alias vr='cd /data; vi results.list'  # Open /data/results.list for editing or review
alias vt='~/vt '     # Open the error log for a trial (pass trial number), or in a BASEDIR
alias li='~/li'      # Run linkit (can be rerun as often as needed)
alias m='~/myver'    # Shows handy JIRA-based version tags for the current BASEDIR
alias ge='cd /test;./grep_in_errorlogs.sh ' # Search for string in all BASEDIR error logs (pass string)
alias rf='vi ~/mariadb-qa/REGEX_ERRORS_FILTER'  # Open error log filter list
alias rfi='vi ~/mariadb-qa/REGEX_ERRORS_FILTER.info'  # Open error log filter list info file
alias rfil='vi ~/mariadb-qa/REGEX_ERRORS_LASTLINE'  # Open error log last line filter list
alias reg='vi /test/REGEX_EXCLUDE'  # Open the REGEX exclude dir for gendirs.sh (basedirs)
alias v='~/v '       # Opens reducer{trial}.sh for a given trial (pass trial number)
alias tcp='~/tcp '   # Testcase prettify (pass SQL file)
alias prg='~/pr | grep ' # Search ~/pr for a specific string or trial number (pass search string or trial number)
alias j='. ~/j '     # Jump to a particular /data directory (pass, for example, workdir number)
" > /tmp/.bashrc
echo -e "cat /tmp/.bashrc >> ~/.bashrc\nRemember to cleanup old framework alias'es, though later ones replace earlier ones.\nDone!"
exit 0
