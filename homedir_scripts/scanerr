#!/bin/bash
# Created by Roel Van de Paar, MariaDB

MARIADB_QA="/home/$(whoami)/mariadb-qa"  # Adjust if needed, though storing mariadb-qa in ~/mariadb-qa is highly recommended

set +H
REGEX_ERRORS_SCAN=
REGEX_ERRORS_LASTLINE=
REGEX_ERRORS_FILTER="NOFILTERDUMMY"  # Leave NOFILTERDUMMY to avoid filtering everything. It will be replaced later if a REGEX_ERRORS_FILTER file is present in mariadb-qa (and by default there is)
if [ -r ${MARIADB_QA}/REGEX_ERRORS_SCAN ]; then
  REGEX_ERRORS_SCAN="$(cat ${MARIADB_QA}/REGEX_ERRORS_SCAN 2>/dev/null | tr -d '\n')"
  if [ -z "${REGEX_ERRORS_SCAN}" ]; then 
    echo "Error: ${REGEX_ERRORS_SCAN} is empty?"
    exit 1
  fi
else
  echo "Error: ${REGEX_ERRORS_SCAN} could not be read by this script"
  exit 1
fi
if [ -r ${MARIADB_QA}/REGEX_ERRORS_LASTLINE ]; then
  REGEX_ERRORS_LASTLINE="$(cat ${MARIADB_QA}/REGEX_ERRORS_LASTLINE 2>/dev/null | tr -d '\n')"
  if [ -z "${REGEX_ERRORS_LASTLINE}" ]; then
    echo "Error: ${REGEX_ERRORS_LASTLINE} is empty?"
    exit 1
  fi
else
  echo "Error: ${REGEX_ERRORS_LASTLINE} could not be read by this script"
  exit 1
fi

# Filter list. Notes for contents of the filter file REGEX_ERRORS_FILTER:
# mtr.add_suppression: cleanup of invalid captures of suppression rather than actual error
# Got error 194 when reading table: MariaDB error code 194: Tablespace is missing for a table (dropped tablespace)
if [ -r ${MARIADB_QA}/REGEX_ERRORS_FILTER ]; then
  REGEX_ERRORS_FILTER="$(cat ${MARIADB_QA}/REGEX_ERRORS_FILTER 2>/dev/null | tr -d '\n')"
fi

# Post scan cleanup
POST_PARSE='s|[:]* \./dev/shm/.*$||;s|[\.]\+$||;s|[0-9]\+ .ERROR. mysqld: Table|ERROR. mysqld: Table|'

if [ "${1}" != "generate_reducers" ]; then
  if [ "${1}" != "local" ]; then  # i.e. called as ~/scanerr to scan all error logs on the server
    echo "--- Searching for various errors in all error logs: This may take a while! ---"
    TO_SCAN='/test/*/*/*.err /data/*/*/*.err /test/*/*/*/*.err /data/*/*/*/*.err /test/*/*/*/*/*.err /data/*/*/*/*/*.err'
  else  # i.e. called from inside a BASEDIR or TRIAL directory
    echo "--- Searching for various errors in ./log/master.err (local mode) ---"
    TO_SCAN='./log/master.err'
  fi
  grep --binary-files=text -Ei "${REGEX_ERRORS_SCAN}" ${TO_SCAN} 2>/dev/null | sort -u 2>/dev/null | grep --binary-files=text -vE "${REGEX_ERRORS_FILTER}" | sed "${POST_PARSE}"
  tail -n1 ${TO_SCAN} 2>/dev/null | grep --no-group-separator --binary-files=text -B1 -E "${REGEX_ERRORS_LASTLINE}" | grep -vE "${REGEX_ERRORS_FILTER}" | tr '\n' ' ' | sed 's| <== |:|g;s|==> |\n|g' | grep --binary-files=text -vE '^[ \t]*$'
else  # generate_reducers mode (as used by ~/mariadb/homedir_scripts/scanerr_gen_reducers aka ~/scanerr_gen_reducers)
  echo "--- Searching for various errors in all error logs and generating reducers for them: This may take a while! ---"
  #TO_SCAN='/data/1*/1*/log/*.err'  # For testing
  TO_SCAN='/data/*/*/*/*.err /data/*/*/*/*/*.err'  # /data based runs only ftm (ref ~/scanerr+)
  grep --binary-files=text -Eio "${REGEX_ERRORS_SCAN}" ${TO_SCAN} 2>/dev/null | sort -u 2>/dev/null | grep --binary-files=text -vE "${REGEX_ERRORS_FILTER}" | sed "${POST_PARSE}"
  tail -n1 ${TO_SCAN} 2>/dev/null | grep --no-group-separator --binary-files=text -B1 -E "${REGEX_ERRORS_LASTLINE}" | grep -vE "${REGEX_ERRORS_FILTER}" | tr '\n' ' ' | sed 's| <== |:|g;s|==> |\n|g' | grep --binary-files=text -vE '^[ \t]*$'  # TODO: May work as-is or may need some more work (note -Eio vs -Ei in first grep, which will not be easy to implement here, but may not be needed as the lastline strings are short already!)
fi
