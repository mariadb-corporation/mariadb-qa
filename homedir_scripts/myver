#!/bin/bash
# Created by Roel Van de Paar, MariaDB
# Expanded by Ramesh Sivaraman, MariaDB

# This script, when executed in proximity to mysqld (ref code below), shows handy JIRA formatting strings, showing the server version, source code revision and build type. These can then be used to surround stacks, log exerpts, code, etc.

set +H  # Disables history substitution and avoids  -bash: !: event not found  like errors
SCRIPT_PWD=$(dirname $(readlink -f "${0}"))

BIN=
if [ -r ./bin/mariadbd -a ! -d ./bin/mariadbd ]; then
  BIN="./bin/mariadbd"
elif [ -r ./bin/mysqld -a ! -d ./bin/mysqld ]; then  # For direct use in BASEDIR, like ~/tt
  BIN="./bin/mysqld"
elif [ -r ./mariadbd -a ! -d ./mariadbd ]; then  # Ported from previous version of myver script
  BIN="./mariadbd"
elif [ -r ./mysqld -a ! -d ./mysqld ]; then  # Ported from previous version of myver script
  BIN="./mysqld"
elif [ -r ./mysqld/mariadbd -a ! -d ./mysqld/mariadbd ]; then  # Exec from within workdir root
  BIN="./mysqld/mariadbd"
elif [ -r ./mysqld/mysqld -a ! -d ./mysqld/mysqld ]; then  # Exec from within workdir root
  BIN="./mysqld/mysqld"
elif [ -r ../bin/mariadbd -a ! -d ../bin/mariadbd ]; then  # Handy when myver is being executed from the mysql-test dir
  BIN="../bin/mariadbd"
elif [ -r ../bin/mysqld -a ! -d ../bin/mysqld ]; then  # Handy when myver is being executed from the mysql-test dir
  BIN="../bin/mysqld"
elif [ -r ../mariadbd -a ! -d ../mariadbd ]; then  # Not currently used, but provisioned alike to ~/t
  BIN="../mariadbd"
elif [ -r ../mysqld -a ! -d ../mysqld ]; then  # Not currently used, but provisioned alike to ~/t
  BIN="../mysqld"
elif [ -r ../mysqld/mariadbd -a ! -d ../mysqld/mariadbd ]; then  # For direct use inside trial directories
  BIN="../mysqld/mariadbd"
elif [ -r ../mysqld/mysqld -a ! -d ../mysqld/mysqld ]; then  # For direct use inside trial directories
  BIN="../mysqld/mysqld"
elif [ -r ./log/master.err ]; then
  POTENTIAL_BIN="$(grep "ready for connections" ./log/master.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -f ${POTENTIAL_BIN} -a -r ${POTENTIAL_BIN} ]; then
    BIN="${POTENTIAL_BIN}"
  fi
elif [ -r ./node1/node1.err ]; then
  POTENTIAL_BIN="$(grep "ready for connections" ./node1/node1.err | sed 's|: .*||;s|^.* ||' | head -n1)"
  if [ -f ${POTENTIAL_BIN} -a -r ${POTENTIAL_BIN} ]; then
    BIN="${POTENTIAL_BIN}"
  fi
fi
if [ -z "${BIN}" ]; then
  echo "Assert: mysqld not found at ./bin/mysqld, nor ../mysqld, nor ../mysqld/mysqld nor other potential mysqld's extracted from any logs at ./log/master.err or ./node1/node1.err"
  exit 1
else
  SOURCE_CODE_REV="$(${SCRIPT_PWD}/../source_code_rev.sh)"
  # Partial code duplication with stack.sh
  SVR=''  # ES,CS,MS
  if [ "$(echo "${PWD}" | grep -o EMD)" == "EMD" -o "$(grep "BASEDIR" --binary-files=text ./start 2>/dev/null | grep -o 'EMD' | head -n1)" == "EMD" ]; then
    SERVER_VERSION="$(${BIN} --version | grep -om1 --binary-files=text '[0-9\.]\+-[0-9]-MariaDB' | sed 's|-MariaDB||')"
    SVR='ES'
  else
    SERVER_VERSION="$(${BIN} --version | grep -om1 --binary-files=text '[0-9\.]\+-MariaDB' | sed 's|-MariaDB||')"
    SVR='CS'
  fi
  if [ -z "${SERVER_VERSION}" ]; then  # Likely MS
    SERVER_VERSION="MySQL $(pwd | grep -o 'mysql-[\.0-9]\+' | sed 's|mysql-||')"
    SVR='MS'
  fi
  # mysql-testi, bin etc. can always be filtered
  DIRFILTER='s|/mysql-test$||;s|/mariadb-test$||;s|/bin$||'
  LAST_THREE="$(echo "${PWD}" | sed "${DIRFILTER}" | sed 's|.*\(...\)$|\1|')"
  BUILD_TYPE=
  SAN="$(echo "${PWD}" | sed "${DIRFILTER}" | sed 's|.*/||' | grep -o '[UBAT]\+SAN')"
  if [ -z "${SAN}" ]; then
    if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized)"; fi
    if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug)"; fi
  else
    if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized, ${SAN})"; fi
    if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug, ${SAN})"; fi
  fi
  if [ -z "${BUILD_TYPE}" -a -r ./BUILD_CMD_CMAKE ]; then
    if ! grep -qi '=Debug' ./BUILD_CMD_CMAKE 2>/dev/null; then
      if [ -z "${SAN}" ]; then BUILD_TYPE=" (Optimized)"; else BUILD_TYPE=" (Optimized, ${SAN})"; fi
    else
      if [ -z "${SAN}" ]; then BUILD_TYPE=" (Debug)"; else BUILD_TYPE=" (Debug, ${SAN})"; fi
    fi
  fi
  if [ -z "${BUILD_TYPE}" -a -x "${BIN}" ]; then
    if [ "$(${BING} --help 2>&1 | head -n1 | grep -o "\-debug")" == "-debug" ]; then
      BUILD_TYPE=" (Debug)";
    else
      BUILD_TYPE=" (Optimized)";
    fi
  fi
  # Partial code duplication with stack.sh, however that script does not check for SAN build types (as it is not commonly needed; almost all crashing bugs reproduce in regular non-SAN builds also, and SAN stacks are usually manually copied from cat log/*.err with a ~/m prefix/suffix)
  MDG=0
  if [ ! -z "$(ls --color=never ./node*/node*.err 2>/dev/null)" ]; then
    MDG=1
  fi
  if [ "${LAST_THREE}" != "dbg" -a "${LAST_THREE}" != "opt" ]; then  # in-trial myver call
    if [ "${MDG}" -eq 1 ]; then 
      LAST_THREE="$(grep --binary-files=text -Eoh "\-dbg|\-opt" ./node*/node*.err 2>/dev/null | head -n1 | sed 's|\-||')"
    else
      LAST_THREE="$(grep --binary-files=text -Eoh "\-dbg|\-opt" ./log/master.err ./var/log/mysqld.*.err 2>/dev/null | head -n1 | sed 's|\-||')"
    fi
  fi
  if [ "${LAST_THREE}" != "dbg" -a "${LAST_THREE}" != "opt" ]; then  # in-trial myver call for ES
    LAST_THREE="$(grep --binary-files=text -oh "BASEDIR.*\-[do][bp][gt]" start 2>/dev/null | grep --binary-files=text -Eoh "\-dbg|\-opt" | head -n1 | sed 's|\-||')"
  fi
  echo "{noformat:title=${SVR} ${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE}}"
  echo ""
  echo "{noformat}"
fi
