#!/bin/bash
# Created by Roel Van de Paar, MariaDB
# tmpfs diskspace and process monitor

WIPE_TMP_ENABLED=0  # /tmp cleaning, generally should NOT be enabled
FILTER_LARGE_NEWBUG_RUNS=1  # For large-scale newbug verification/reduction runs (normally reducers themselves are not filtered)

# Filter this list of processes from termination  # TODO: may need xargs? (only add if proven to be needed as filter)
FILTER="uniq_newbugs|large_newbug_run|findbug|bug_report|pquery-results|grep|timeout|build|fireworks|cc|clang|perl|mtr_to_sql|generator.sh|mysql-test-run|mtr|clean_all|clean-all|swapoff|swapon" 

update_current_filter_pids(){  # Do not include reducers (reducer123.sh) themselves in this list!
  PR_PID_FILTER=;GE_PID_FILTER=;S_PID_FILTER=;NEWBUG_PID_FILTER=
  # pquery-run.sh screens (per-workdir)
  PR_PID_FILTER="$(screen -ls | grep -o '[0-9][0-9]\+\.pr[0-9]\+' | sed 's|\..*||' | grep -o '[0-9]\+' | tr '\n' '|')"
  # pquery-go-expert.sh screens (per-workdir)
  GE_PID_FILTER="$(screen -ls | grep -o '[0-9][0-9]\+\.ge[0-9]\+' | sed 's|\..*||' | grep -o '[0-9]\+' | tr '\n' '|')"
  # reducer.sh screens (per-trial) - this is the screen PIDs, not the reducer PIDs: the latter should not be filtered
  S_PID_FILTER="$(screen -ls | grep -o '[0-9][0-9]\+\.s[0-9]\+' | sed 's|\..*||' | grep -o '[0-9]\+' | tr '\n' '|')"
  # newbug.*reducer.sh screens (per-trial) - the only place where actual reducers can be included (and only for newbug ones)
  if [ "${FILTER_LARGE_NEWBUG_RUNS}" -eq 1 ]; then
    NEWBUG_PID_FILTER="$(ps -ef | grep 'newbug.*reducer.sh' | awk '{print $2}' | sort -u | sed 's|\..*||' | grep -o '[0-9]\+' | tr '\n' '|')"
  fi
  COMBINED_PID_FILTER="$(echo "${PR_PID_FILTER}${GE_PID_FILTER}${S_PID_FILTER}${NEWBUG_PID_FILTER}" | sed 's/|[|]\+/|/g;s/|$//;s/^|//')"
  PR_PID_FILTER=;GE_PID_FILTER=;S_PID_FILTER=;NEWBUG_PID_FILTER=
}

if [ "${STY}" == "" -o "${1}" == "RUNONCE" ]; then
  THIS_SCRIPT="$(readlink -f $0)"  # Resolves symlinks, result is the actual script including directory
  SCREEN_NAME='ds'
  if [ "${1}" == "RUNONCE" ]; then
    if [ -z "$(screen -ls | grep '\.ds_r_o	')" ]; then  # Ensure no RUNONCE ds is already running
      screen -admS "${SCREEN_NAME}_r_o" bash -c "${THIS_SCRIPT} R_O"  # Do not re-pass RUNONCE to avoid inf loop, but make sure screen started process knows this is a RUNONCE run by passing R_O
    fi
  else
    echo "Not a screen, restarting myself inside a screen"
    screen -admS "${SCREEN_NAME}" bash -c "${THIS_SCRIPT} ${*}"
    sleep 1
    screen -d -r "${SCREEN_NAME}"
  fi
  return 2> /dev/null; exit 0
fi

if [ ! -r ~/sr ]; then echo "~/sr required! Please copy it from ~/mariadb-qa/homedir_scripts. Terminating."; exit 1; fi
echo 'Starting up...'
sudo bash -c "$(which echo) 4 > /proc/sys/vm/drop_caches"  # Disable bulk dmesg messages
COUNT1=9  # Dummy startup values to trigger all functions on startup: slow, but helpful
COUNT2=59
COUNT3=4999
NEWBUGCOUNT="Pending"
FUZZERBUGCOUNT="Pending"
TESTCASES="Pending"
while :; do 
  clear
  COUNT1=$[ ${COUNT1} + 1 ]
  COUNT2=$[ ${COUNT2} + 1 ]
  COUNT3=$[ ${COUNT3} + 1 ]
  df -h | head -n1
  df -h | grep -vE "/snap/|/run/|/cgroup|/efi|udev|/run" | sed '1d' | sort   # | grep -v "shm"
  #cd /dev/shm
  #SHM="$(df -h | grep '^tmpfs' | grep 'shm' | sed 's|G.*|G|')"
  #du -shc | grep total | sed "s|total||;s|^|${SHM}  |"
  #cd - >/dev/null
  echo ''
  if [ "${WIPE_TMP_ENABLED}" -eq 1 ]; then
    echo -n "${COUNT1}/10 ${COUNT2}/60 ${COUNT3}/5000 | "
  else
    echo -n "${COUNT1}/10 ${COUNT2}/60 | "
  fi
  echo -n "Reducers: $(~/count_reducers) | "
  echo -n "mysqld/mariadbd's: $(ps -ef | grep -E 'mysqld|mariadbd' | grep 'no-defaults' | sed "s|..user=.*||;s|.*no-defaults ||" | sort -u | wc -l) | "
  echo -n "Unique New+Fuzzer: ${NEWBUGCOUNT}+${FUZZERBUGCOUNT} | "
  echo -n "Testcases: ${TESTCASES}"
  sleep 3
  if [ ${COUNT1} -ge 10 -o "${1}" == "R_O" ]; then
    # Cleanup any processes which have deleted files open. This command assists greatly in server memory management
    update_current_filter_pids
    sudo lsof -s +L1 | grep '(deleted)' | awk '{print $7" "$2" "$3" "$10}' | grep 'dev/shm' | awk '{print $2}' | sort -u | grep -vE '^[0-9][0-9][0-9]$|^[0-9][0-9]$|^[0-9]$' | tr '\n' '|' | sed "s/^/ps -ef | grep -E '/;s/|$/' | grep -vEi '${FILTER}'/;s/$/\0/" | xargs -0 -I{} bash -c "{}" | awk '{print $2}' | grep -vE "${COMBINED_PID_FILTER}" | sort -u | xargs -P20 -I{} kill -9 {} 2>/dev/null
    # Check if there are any early-terminated or finished reducers which still have /dev/shm directories in use
    # TODO: Possible race condition. If this command runs at exactly the time where the initial reducer just ended (before auto-pge runs are done for the same trial), it is possible that such directory will be deleted before the pge's can run. Once the pge is started, due to the append to reducer.log and the tail -n1, that pge should be fine till completition, at which time the same issue may occur
    cd /dev/shm
    tail -n1 [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/reducer.log 2>/dev/null | grep -Eib1 'DONE. Final testcase|Abort. The source for this reducer was likely deleted. Terminating' | grep '==' | grep -o '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' | xargs -I{} echo 'if [ ! -z "{}" ]; then if [ -d ./{} ]; then rm -Rf /dev/shm/{}; fi; fi' | tr '\n' '\0' | xargs -0 -I{} bash -c "{}"
    cd - >/dev/null
    # Check process list for any datadir=/dev/shm/1[7-9]... and if found check if such directory is present. If not, terminate any processes associated with the non-existing directory. This command assist greatly in overall server memory management
    update_current_filter_pids
    ps -ef | grep -o 'datadir=/dev/shm/1[7-9][0-9]\+' | sed 's|.*=||' | sort -u | xargs -I{} echo "if [ ! -d {} ]; then echo "{}"; fi" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}" | xargs -I{} echo "ps -ef | grep '{}' | grep -vEi '${FILTER}'" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}" | awk '{print $2}' | grep -vE "${COMBINED_PID_FILTER}" | sort -u | xargs -I{} kill -9 {} 2>/dev/null  # Improved version, fireworks protection
    # Cleanup any processes which are still live yet the /dev/shm workdir was already deleted (these two commands are additional/complimentary to the one above. The final one uses nsenter as an improved method of killing processes associated with the kernel's init process (pid 1) which cannot be terminated with kill -9
    update_current_filter_pids
    ps -ef | grep -o '/dev/shm/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' | sort -u | xargs -I{} echo "if [ ! -d '{}' ]; then ps -ef | grep '{}' | grep -vEi '${FILTER}' | awk '{print \$2}' | grep -vE '${COMBINED_PID_FILTER}' | xargs -I_ kill -9 _; fi;" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}"
    update_current_filter_pids
    ps -ef | grep -o '/dev/shm/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' | sort -u | xargs -I{} echo "if [ ! -d '{}' ]; then ps -ef | grep '{}' | grep -vEi '${FILTER}' | awk '{print \$2}' | grep -vE '${COMBINED_PID_FILTER}' | xargs -I_ sudo nsenter -t _ -m -u -i -n kill -9 _; fi;" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}"
    # Cleanup known bugs from fuzzing
    if [ -d /home/$(whoami)/fuzzing ]; then
      CURPWD="${PWD}"
      cd /home/$(whoami)/fuzzing
      if [ -r ./list_unique_bugs_seen ]; then
        FUZZERBUGCOUNT="$(./list_unique_bugs_seen 2>/dev/null | wc -l)"
      fi
      cd "${CURPWD}"
    fi
    # Cleanup cache, may help avoid OOM
    sudo bash -c "$(which echo) 3 > /proc/sys/vm/drop_caches" &
    # Terminate subreducers which have been active for 1h+. It is unlikely that any subreducer will take that long to run
    update_current_filter_pids
    #ps -ef | grep 'subreducer' | awk '{print $2}' | xargs -I{} ps -p "{}" -o etime,command | grep -E '[1-9]:[0-5][0-9]:[0-5][0-9] |[1-9][0-9]:[0-5][0-9]:[0-5][0-9] ' | awk '{print $3}' | xargs -I{} echo "ps -ef | grep '{}' | grep -vE '${FILTER}'" | xargs -I{} bash -c "{}" | awk '{print $2}' | grep -vE "${COMBINED_PID_FILTER}" | xargs -I{} kill -9 {}  # Expensive command. However, this can eleminate many GB of memory when subreducers are stuck for a long time
    ps -ef | grep 'subreducer' | grep -vE "${FILTER}" | awk '{print $2}' | xargs -I{} ps -p "{}" -o etime,command,pid | grep -E '[1-9]:[0-5][0-9]:[0-5][0-9] |[1-9][0-9]:[0-5][0-9]:[0-5][0-9] |[0-9]-[0-2][0-9]:[0-5][0-9]:[0-5][0-9]' | awk '{print $4}' | grep -o '^[0-9]\+' | grep -vE "${COMBINED_PID_FILTER}" | xargs -I{} kill -9 {}  # Improved (works better + less resources used) command. Ref comment on remarked line above for more info
    # RV-05/02/22 increased frequency of ~/mariadb-qa/tmpfs_clean.sh from 60 rounds to 10 rounds, and starting process as background process. Improved ~/mariadb-qa/tmpfs_clean.sh to self-terminate if it is running already
    ~/mariadb-qa/tmpfs_clean.sh 1 SILENT &
    if [ -r /data/NEWBUGS/mv_index_corrupted ]; then  # Move similar index corruptions into their own subdirectory
      /data/NEWBUGS/mv_index_corrupted
    fi
    NEWBUGCOUNT="$(cat /data/NEWBUGS/*.string 2>/dev/null | sed 's|#sql-.*MAI|#sql-.MAI|' | sort -u | wc -l)"
    cd /dev/shm
    # Check reducer.log in all /dev/shm/[0-9]* directories for the name of the reducer script. Then check ps -ef output to see if that reducer is still actually running. If not, delete the directory as it is no loger of any use. This script greatly helps with keeping especially swap space more empty, for an as yet unknown reason
    grep -m1 'Init.*Reducer' [0-9]*/reducer.log 2>/dev/null | sed 's|.*./||;s| .*||' | sort -u | xargs -I{} echo "if [ -z \"\$(ps -ef | grep '{}' | grep -v grep)\" ]; then echo '{}'; fi" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}" | xargs -I{} grep '{}' /dev/shm/1*/reducer.log | sed 's|/reducer.log.*||' | sort -u | xargs -I{} echo "if [ \"\$(echo '{}' | grep -o '^/dev/shm/1')\" == '/dev/shm/1' -a -d '{}' ]; then rm -Rf '{}'; fi" | tr '\n' '\0' | xargs -0 -I{} bash -c "{}"  # RV 21/02/24: updated /dev/shm/16 to /dev/shm/1 to cater for new 17.. and later epochs
    # Check if we have reducer directories > 10GB on /dev/shm and drop them, saving the reducer file
    # Only one directory "per COUNT1 round" is done at the time
    # Updated line below to be safer, but not sure it will fix https://jira.mariadb.org/browse/TODO-3015
    ANY_SINGLE_LARGE_REDUCER_DIR="$(ls --color=never 2>/dev/null | grep '^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' | xargs du -shc 2>/dev/null | grep -vE 'total|\.$' | grep '^[.0-9]\+G' | grep '^[1-9][0-9]' | head -n1 | awk '{print $2}')"
    if [ ! -z "${ANY_SINGLE_LARGE_REDUCER_DIR}" ]; then
      if [ -d ${ANY_SINGLE_LARGE_REDUCER_DIR} ]; then
        if [ -r ${ANY_SINGLE_LARGE_REDUCER_DIR}/reducer.log ]; then
          # Copy log
          cp ${ANY_SINGLE_LARGE_REDUCER_DIR}/reducer.log ~/terminated_${ANY_SINGLE_LARGE_REDUCER_DIR}_reducer.log
          # Terminate instance
          update_current_filter_pids
          grep -m1 'Init.*Reducer' ${ANY_SINGLE_LARGE_REDUCER_DIR}/reducer.log | sed 's|.*reducer|reducer|;s| .*||' | xargs -I{} echo "ps -ef | grep {}" | xargs -I{} bash -c "{}" | grep -vE "${FILTER}" | awk '{print $2}' | grep -vE "${COMBINED_PID_FILTER}" | xargs -I{} kill -9 {}
          # Check for continued dir presence and cleanup
          if [ -d ${ANY_SINGLE_LARGE_REDUCER_DIR} ]; then rm -Rf ${ANY_SINGLE_LARGE_REDUCER_DIR}; fi
        fi
      fi
    fi
    cd - >/dev/null
    sync
    COUNT1=0
  fi
  if [ ${COUNT2} -ge 60 -o "${1}" == "R_O" ]; then
    TESTCASES="$(cd /data && ./my | grep -v '^[ ]*0 ' | wc -l)"  # Expensive
    sudo bash -c "$(which echo) 3 > /proc/sys/vm/drop_caches"  # Cleanup cache, may help avoid OOM
    if [ -d /data ]; then
      cd /data
      # The following seems handy, but it is not, and can use some improvements TODO. Reason: for ./clean_all, 
      # this may wipe reducers which have their string already included in known bugs whilst you are working on it
      #if [ -r ./clean_all ]; then ./clean_all; fi
      if [ -r ./clean_newbugs ]; then
        if [ -z "$(ps -ef | grep clean_newbug | grep -v grep)" ]; then  # Ensure clean_newbugs is not running already
          ./clean_newbugs >/dev/null &  # RV 31/1/22: changed to background process so other processes are not held up
        fi
        if [ -d /home/$(whoami)/fuzzing/newbugs ]; then
          ./clean_newbugs /home/$(whoami)/fuzzing/newbugs
        fi
      fi
    fi
    sync
    COUNT2=0
  fi
  if [ ${COUNT3} -ge 5000 -o "${1}" == "R_O" ]; then
    if [ "${WIPE_TMP_ENABLED}" -eq 1 ]; then
      rm -Rf /tmp/[0-9][0-9][0-9][0-9][0-9][0-9] >/dev/null 2>&1 &
      #rm -Rf /tmp/1[5-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] >/dev/null 2>&1 &  # This may be ongoing reducer runs... TODO: fix this so it checks for date/time similar like tmpfs_clean.sh does
      sync
    fi
    COUNT3=0
  fi
  ## --------- TODO: functionality below needs testing
  ## Check if any reducers are using >=10GB, terminate them and restart them on disk instead of tmpfs
  #rm -f ~/large_reducers
  ## Find /dev/shm assigned epoch subdirs >=10GB, count them and then loop through them 1-by-1
  #du -sh 1[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] | grep "[0-9][0-9]G" | awk '{print $2}' > ~/large_reducers
  #COUNT=$(wc -l ~/large_reducers 2>/dev/null | sed 's| .*||')
  #for LINE in $(seq 1 ${COUNT}); do
  #  EPOCH="$(head -n ${LINE} ~/large_reducers | tail -n1)"
  #  # Find the reducer connected with the particular epoch /dev/shm subdir
  #  REDUCER="$(grep -om1 ".Init. Reducer:.*" /dev/shm/${EPOCH}/reducer.log | sed 's|.*: ||')"
  #  # Kill all processes related to the epoch /dev/shm subdir (excluding reducer itself)
  #  update_current_filter_pids
  #  ps -ef | grep ${EPOCH} | grep -vE "${FILTER}" | awk '{print $2}' | grep -vE "${COMBINED_PID_FILTER}" | xargs kill -9
  #  # Change workdir to disk instead of tmpfs
  #  sed -i "s|^WORKDIR_LOCATION=1|WORKDIR_LOCATION=3|" ${REDUCER}
  #  sed -i "s|^WORKDIR_M3_DIRECTORY=.*|WORKDIR_M3_DIRECTORY=~/reducers|" ${REDUCER}
  #  mkdir -p ~/reducers
  #  if [ ! -d ~/reducers ]; then 
  #    echo "Script attempted to create ~/reducers but somehow it failed. Terminating."
  #    exit 1
  #  fi
  #  # Terminate reducer by reducing the corresponding screen (will also ensure all processes are gone)
  #  ps -ef | grep "$(basename "${REDUCER}")" | grep -vE "${FILTER}" | grep -i screen | awk '{print $2}' | xargs kill -9  # Idem on COMBINED_PID_FILTER, ref note just above
  #  # Restart reducer with new setting
  #  # TODO: expand this script to check for presence of _out file to shorten time to reduced testcase. However, there is not real way to check if such an _out file was saved correctly. Use .prev perhaps if present
  #  eval $(cd $(echo ${REDUCER} | sed 's|$(basename "${REDUCER}")||'); ~/sr $(echo "$(basename "${REDUCER}")" | sed 's|[^0-9]||g'))
  #done 
  #rm -f ~/large_reducers
  ## --------- /TODO
  if [ "${1}" == "R_O" ]; then 
    break
  fi
done
