#!/bin/bash
# Created by Roel Van de Paar, MariaDB

# This script generates a UniqueID (using new_text_string.sh) for a given crash, assert, ASAN, UBSAN, LSAN or TSAN issue
# It is generall executed from within a BASEDIR which has experienced a failure of any of these types
# It also outputs handy JIRA search URL's and handy JIRA formatting strings to aid with logging bugs at jira.mariadb.org

set +H  # Disables history substitution and avoids  -bash: !: event not found  like errors

NOPERL=0
perl --version >/dev/null 2>&1
if [ $? -ne 0 ]; then echo "This script requires perl, please install it"; NOPERL=1; fi
SCRIPT_PWD=$(dirname $(readlink -f $0))

EXIT_CODE=0
if [ -r ${HOME}/mariadb-qa/new_text_string.sh ]; then
  TEXT="$(${HOME}/mariadb-qa/new_text_string.sh)"
  if [ $? -eq 1 ]; then
    EXIT_CODE=1
  fi
elif [ -r ${SCRIPT_PWD}/new_text_string.sh ]; then
  TEXT="$(${SCRIPT_PWD}/new_text_string.sh)"
  if [ $? -eq 1 ]; then
    EXIT_CODE=1
  fi
elif [ -r ${SCRIPT_PWD}/../new_text_string.sh ]; then  # ~/mariadb-qa/homedir_scripts provision (not sure if needed)
  TEXT="$(${SCRIPT_PWD}/../new_text_string.sh)"
  if [ $? -eq 1 ]; then
    EXIT_CODE=1
  fi
elif [ -r ${HOME}/t ]; then
  TEXT="$(${HOME}/t)"
  if [ $? -eq 1 ]; then
    EXIT_CODE=1
  fi
else
  echo "Assert: new_text_string.sh cannot be located"
  exit 1
fi

if [ "${EXIT_CODE}" -eq 1 ]; then
  echo "----- Bug String  -----"
  echo "${TEXT}"
  echo "-----------------------"
  echo "Assert: new_text_string.sh yielded a non-0 exit code"
  exit 1
fi
EXIT_CODE=

if [[ "${TEXT}" == *"no core file found"* ]]; then 
  echo "Assert: no core file found in */*core* and no *SAN issue detected"
  #echo $-
  noformat_strings
  exit 1
fi

echo "----- Bug String  -----"
echo "${TEXT}"

if [ -z "$(echo "${TEXT}" | sed 's|[ \t]||g')" ]; then
  exit 1
fi
echo "----- String Scan -----"
FRAMEX="$(echo "${TEXT}" | sed 's/.*|\(.*\)|.*|.*|.*$/\1/')"
FRAMESELECTED="1st"
if [ "${FRAMEX}" == "ut_dbg_assertion_failed" -o "${FRAMEX}" == "mysql_execute_command" ]; then  # Too generic a frame, select next one.
  FRAMEX="$(echo "${TEXT}" | sed 's/.*|.*|\(.*\)|.*|.*$/\1/')"
  FRAMESELECTED="2nd"
fi
if [[ "${TEXT}" != *"SAN"* ]]; then  # Normal bug
  OUT="$(grep -Fi --binary-files=text "${TEXT}" ~/mariadb-qa/known_bugs.strings)"
  OUT2="$(grep -Fi --binary-files=text "${FRAMEX}" ~/mariadb-qa/known_bugs.strings)"
else  # *SAN bug
  OUT="$(grep -Fi --binary-files=text "${TEXT}" ~/mariadb-qa/known_bugs.strings.SAN)"
  OUT2="$(grep -Fi --binary-files=text "${FRAMEX}" ~/mariadb-qa/known_bugs.strings.SAN)"
fi
if [ -z "${OUT}" ]; then
  if [ -z "${OUT2}" ]; then 
    echo "BUG NOT FOUND IN KNOWN BUGS LIST! POTENTIALLY NEW BUG TO LOG; SEARCH FIRST:"
  else 
    echo "BUG NOT FOUND (IDENTICALLY) IN KNOWN BUGS LIST! POTENTIALLY NEW BUG TO LOG. HOWEVER, A PARTIAL MATCH BASED ON THE ${FRAMESELECTED} FRAME ('${FRAMEX}') WAS FOUND, AS FOLLOWS: (PLEASE CHECK IT IS NOT THE SAME BUG):"
    echo "${OUT2}"
  fi
elif [[ "${OUT}" == "#"* ]]; then
  echo "ALREADY KNOWN *PREVIOUSLY FIXED (OR NON-FILTERED)* BUG! POTENTIALLY NEW BUG TO LOG; SEARCH(/CHECK) FIRST:"
  echo "${OUT}"
else
  echo "ALREADY KNOWN BUG!"
  echo "${OUT}"
fi

echo "----- Search URL (3 most significant frames) -----"  # Out of the 4 frames available
# First frame (FRAMEX): ref FRAMEX generation code above. Here we just escape it if needed (for example for spaces and special chars
FRAMEX="$(echo -n "${FRAMEX}" | perl -MURI::Escape -le 'print uri_escape <STDIN>' | sed 's|\%0A||g' | sed 's/MUTEX_ERROR[|]*//')"
FRAMEY="$(echo "${TEXT}" | sed 's/.*|\(.*\)|.*|.*$/\1/' | perl -MURI::Escape -le 'print uri_escape <STDIN>' | sed 's|\%0A||g')"
FRAMEZ="$(echo "${TEXT}" | sed 's/.*|\(.*\)|.*$/\1/' | perl -MURI::Escape -le 'print uri_escape <STDIN>' | sed 's|\%0A||g')"
#FRAME4="$(echo "${TEXT}" | sed 's/.*|\(.*\)$/\1/')"  // Last frame not used
echo "https://jira.mariadb.org/issues/?jql=text%20~%20%22%5C%22${FRAMEX}%5C%22%22%20and%20text%20~%20%22%5C%22${FRAMEY}%5C%22%22%20and%20text%20~%20%22%5C%22${FRAMEZ}%5C%22%22%20ORDER%20BY%20status%20ASC%2Cupdated%20DESC"

ASSERT="$(echo -n "${TEXT}" | sed 's/||/DUMMYREP/g' | sed 's/|.*//' | sed 's/DUMMYREP/||/g;' | sed 's/MUTEX_ERROR[|]*//')"
if [[ "${ASSERT}" != "SIGSEGV" && "${ASSERT}" != "SIGABRT" ]]; then
  echo "----- Search URL (assert message) -----"
  if [ ${NOPERL} -eq 0 ]; then  # Properly escape all special characters to generate a correct URL
    ASSERT="$(echo -n "${ASSERT}" | perl -MURI::Escape -le 'print uri_escape <STDIN>' | sed 's|\%0A||g')"
  fi
  echo "https://jira.mariadb.org/issues/?jql=text%20~%20%22%5C%22${ASSERT}%5C%22%22%20ORDER%20BY%20status%20ASC%2Cupdated%20DESC"
fi

echo '----- Handy extra noformat strings -----'
if [ -r ${SCRIPT_PWD}/myver ]; then
  ${SCRIPT_PWD}/myver
else
  echo "Assert: ${SCRIPT_PWD}/myver not found"
  exit 1
fi

exit 0
