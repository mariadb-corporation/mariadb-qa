#!/bin/bash

# For the BASEDIR, either specifying -opt or -dbg is fine, the script will auto-compute the other directory
# A single opt or dbg workdir instance will tend to take 0.4-0.8 GB of space (usually on /dev/shm)
BASEDIR=/test/bb-10.6-MDEV-26055-MDEV-26827_MD130323-mariadb-10.6.13-linux-x86_64-dbg
#BASEDIR=/test/MD110223-mariadb-10.11.2-linux-x86_64-dbg
#BASEDIR=/test/MDEV-16329_bb-11.0-oalter_MD210223-mariadb-11.0.1-linux-x86_64-opt
RUNSOPT=3
RUNSDBG=3
#CONF=pquery-run-MD-spider.conf
#CONF=pquery-run-MD-spider-all.conf
#CONF=pquery-run-MD-federated.conf
CONF=pquery-run-MD.conf  # Using PRE_SHUFFLE_SQL=2
#CONF=pquery-run-MD-crt.conf
#CONF=pquery-run-MD-allb.conf

#CONF=pquery-run-MD-btrfs.conf
#CONF=pquery-run-MDEV-24660.conf   # File name only, no spaces, no directories
#CONF=pquery-run-MD-buf.conf
#CONF=pquery-run-MD-rr.conf
#CONF=pquery-run-MD-idb1.conf
#CONF=pquery-run-MD105-MT.conf
#CONF=pquery-run-MD-SAN.conf

if [ -z "${CONF}" ]; then
  echo "\$CONF was not set. Please point it to a pquery-run.conf file like pquery-run-MD.conf (path is not required)"
  exit 1
fi

if [ ! -d "${BASEDIR}" ]; then
  echo "The basedir (${BASEDIR}) does not exist or is not readable by this script! Terminating."
  exit 1
else
  echo "Basedir: ${BASEDIR}"
  echo "This script should show further output in 10-20 seconds. If it does not, see:"
  echo "screen -d -r pr1  # for the cause"
  echo ""
fi

rm -Rf /data/tmp/*.sql

TOTALRUNS=$[ ${RUNSOPT} + ${RUNSDBG} ]
MON=
for RUN in $(seq 1 ${TOTALRUNS}); do
  rm -f /tmp/gomd_helper
  cd ~/mariadb-qa
  if [[ "${CONF}" == *"/"* ]]; then echo "Assert: no paths/directories allowed in CONF (${CONF}) setting!"; exit 1; fi
  if [ ! -r ${CONF} ]; then echo "Assert: ${CONF} not found!"; exit 1; fi
  sed -i "s|^BASEDIR=\([^#]\+\)|BASEDIR=${BASEDIR}   |" ${CONF}
  if [ ${RUN} -le ${RUNSOPT} ]; then  # Opt runs
    sed -i 's|^BASEDIR=\([^#]\+\)-dbg|BASEDIR=\1-opt|' ${CONF}
  else  # Dbg runs
    sed -i 's|^BASEDIR=\([^#]\+\)-opt|BASEDIR=\1-dbg|' ${CONF}
  fi
  screen -admS pr${RUN} bash -c "cd ~/mariadb-qa; ./pquery-run.sh ${CONF}; bash"
  while :; do
    sleep 1
    if [ -r /tmp/gomd_helper ]; then
      sleep 0.3
      DIR="$(cat /tmp/gomd_helper)"
      if [ -d "${DIR}" ]; then
        rm -f /tmp/gomd_helper
        cd ${DIR}/..
        DIREND="$(echo "${DIR}" | sed 's|.*/||')"
        if [ ! -d ./${DIREND} ]; then
          echo "Assert: ./${DIREND} should exist, based on directory passed by gomd_helper (${DIR})"
          exit 1; break
        else
          if [[ "${CONF}" != *"crt"* && "${CONF}" != *"CRT"* ]]; then  # Do not stat ge instances for crash recovery runs
            if [ ! -r ~/sge ]; then 
              echo "Assert: ~/sge not available! Cannot start pquery-go-expert!" 
              exit 1; break
            else
              ~/sge "${DIREND}" "pr${RUN}"
              TYPE="DBG"
              if [ ${RUN} -le ${RUNSOPT} ]; then TYPE="OPT"; fi
              echo "MD ${TYPE} Run ${RUN} started (Dir: ${DIR} Screen: pr${RUN}), and pquery-go-expert started for the same!"
              MON[RUN]="$(echo "${DIR}" | sed 's|.*/||' | grep -o '[0-9]\+')"
              break
            fi
          else
            if [ ! -r ~/crc ]; then
              echo "Assert: ~/crc not available! Cannot start crash recovery handlers!" 
              exit 1; break
            else
              screen -admS "crc$(echo "${DIR}" | sed 's|.*/||')" bash -c "cd ${DIR}; while true; do ~/crc; sleep 20; done; bash"  # Start crash testing handler for the (each) workdir
              TYPE="DBG"
              if [ ${RUN} -le ${RUNSOPT} ]; then TYPE="OPT"; fi
              echo "MD ${TYPE} Run ${RUN} started (Dir: ${DIR} Screen: pr${RUN}), and a crash recovery handler (~/crc) started for the same!"
              MON[RUN]="$(echo "${DIR}" | sed 's|.*/||' | grep -o '[0-9]\+')"
              break
            fi
          fi
        fi 
      fi
    fi
  done
done
echo ""
echo "For updating the results script (add/edit /data/results.list, then run the /data/results script):"
for RUN in $(seq 1 ${TOTALRUNS}); do
  echo "MON[${RUN}]=${MON[${RUN}]}"
done
