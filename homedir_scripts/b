#!/bin/bash

rm -f report.log
if [ -r report.log ]; then echo "Assert: report.log still present though this script tried to delete it!"; exit 1; fi

if [ ! -r ../gendirs.sh ]; then echo "Assert: ../gendirs.sh not available, are you executing this from within a BASEDIR?"; exit 1; fi

if [ "${1}" == "GAL" ]; then
  if [ -z "$(echo "$(cd ..;./gendirs.sh GAL)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
else
  if [[ "${PWD}" != *"SAN"* ]]; then
    if [ -z "$(echo "$(cd ..;./gendirs.sh)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
  else
    if [ -z "$(echo "$(cd ..;./gendirs.sh SAN)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
  fi
fi

export TEXT=
MYEXTRA_OPT=
if [[ "${PWD}" == *"SAN"* ]]; then
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Assert: SAN builds are being used, yet no options were passed."
    echo "To check for an ASAN/UBSAN/TSAN bug, do:  ~/b SAN 'bug_to_look_for'"
    echo "Where bug_to_look for is the ASAN/UBSAN/TSAN string to look for in the error log. Note that a generic 'runtime error:' can be used for UBSAN, a generic '=ERROR:' for ASAN, and a generic 'ThreadSanitizer:' for TSAN issues, though it is likely better to set a more specific string"
    exit 1
  fi
fi
if [ "${1}" == "SAN" ]; then
  if [ ! -z "$(grep --binary-files=text -i "SAN" ../REGEX_EXCLUDE | grep -v 'SAN_MD[0-9]')" ]; then 
    echo "Assert: remove SAN from ../REGEX_EXCLUDE"
    exit 1
  fi
  export TEXT="${2}"
  # MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|SAN||;s|${TEXT}||')"
  MYEXTRA_OPT="$3 $4 $5 $6 $7 $8 $9"
  ~/mariadb-qa/bug_report.sh SAN "${MYEXTRA_OPT}" | tee report.log
elif [ "${1}" == "GAL" ]; then
  MYEXTRA_OPT="$*"
  #export TEXT=""  # Look for corefiles (does not work perfectly, ref next line)
  # New test as of 3/11/20: ensure we're looking for 'signal' (of 'got signal'), as cores do not always seem to be generated in MD (long standing issue, source unclear)
  # Note 1/05/21: the reason this still works correctly for Galera is that the Galera build scripts do not have the build code patches for core dumps yet. Thus, "mysqld got signal" or "signal" would likely work fine at all times. Ref below in non-Galera section for more on this. Ideally this would be changed to look for all issues by using "BBB". < TODO
  export TEXT="mysqld got signal"  
  #rm -Rf ../*/data.PREV  # Avoid data.PREV cores from being picked up and save disk space
  ~/mariadb-qa/bug_report.sh GAL "${MYEXTRA_OPT}" | tee report.log
  ~/tt | grep -A1 "URL" | tee -a report.log
  echo '*** All strings merged (for updating ~/kb) ***' | tee -a report.log
  if [ -r ../allstrings_merged ]; then
    cd .. && ./allstrings_merged GAL | tee -a report.log && cd - >/dev/null 2>&1
  fi
else
  MYEXTRA_OPT="$*"
  export TEXT="BBB"  # A dummy string to let findbug+ know we want to scan for a set of strings to establish crashes
  rm -Rf ../*/data.PREV  # Avoid data.PREV cores from being picked up and save disk space
  ~/mariadb-qa/bug_report.sh "${MYEXTRA_OPT}" | tee report.log
  ~/tt | tee -a report.log
  echo '*** All strings merged (for updating ~/kb) ***' | tee -a report.log
  if [ -r ../allstrings_merged ]; then
    cd .. && ./allstrings_merged | tee -a report.log && cd - >/dev/null 2>&1
  fi
  # The following code is now precautionary/defensive coding as this is covered in the new port assignment code
  if grep --binary-files=text 'Do you already have another mysqld server running on port' */log/master.err 2>/dev/null; then
    echo "------------------------------------------------------------------------------------------"
    echo "Assert: the text 'Do you already have another mysqld server running on port' was found in:"
    grep -l --binary-files=text 'Do you already have another mysqld server running on port' */log/master.err
    echo "You will probably want to fix this port conflict and then re-run ~/b!"
    echo "------------------------------------------------------------------------------------------"
  fi
fi

