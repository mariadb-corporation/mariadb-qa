#!/bin/bash
# Created by Roel Van de Paar, MariaDB
set +H  # Disables history substitution and avoids  -bash: !: event not found  like errors

if [ -z "${PASS_MYEXTRA_TO_START_ONLY}" ]; then  # Check if an external script (like ~/b) has set this option. If not, set it here                                                                                         
  PASS_MYEXTRA_TO_START_ONLY=1  # If 0, then MYEXTRA_OPT is passed to ./all (i.e. options take effect on init and start). If 1, then MYEXTRA_OPT is passed to ./start only (i.e. options take effect on start only, not init). When using for example --innodb_page_size=4 (an option needed for both server init + start), 0 is required. When using for example --innodb-force-recovery=1 or --innodb-read-only=1 (options that can only be used with start and not with init), 1 is required. TODO: this option can be automated 0/1 towards known options that require either 0 or 1 for this setting. Scan MYEXSTRA_OPT to do so
fi
export PASS_MYEXTRA_TO_START_ONLY=${PASS_MYEXTRA_TO_START_ONLY}

if [ "${BPQUERY}" == "1" ]; then
  echo "Using pquery client for testcase replay"
fi

if [[ "${1}" == "--"* ]]; then
  echo "Assert: it looks like you are trying to specify a -- mysqld option to this script. This is incorrect."
  echo "Instead, add the following to the testcase (in.sql):"
  echo "# mysqld options required for replay: --your_option"
  echo "As the first line, and this script will automatically parse and use it."
  exit 1
fi 

set "${1^^}" "${2}"  # Make ${1} uppercase ('san' > 'SAN')
sleep 10
rm -f report.log
if [ -r report.log ]; then echo "Assert: report.log still present though this script tried to delete it!"; exit 1; fi

# Likely mistaken use cases (reversed)
if [[ "${PWD}" == *"SAN"* && "${1}" != "SAN" ]]; then
  echo "Warning: you are starting '~/b' from a SAN basedir. Do you maybe want to use '~/b san' instead?"
  echo "Pausing 3 seconds, then continuing as requested (likely incorrect). Press CTRL+c to terminate this script"
  echo ''
  sleep 3
elif [[ "${PWD}" != *"SAN"* && "${1}" == "SAN" ]]; then
  echo "Warning: you are starting '~/b san' from a non-SAN basedir. Do you maybe want to use '~/b' instead?"
  echo "Pausing 3 seconds, then continuing as requested (likely incorrect). Press CTRL+c to terminate this script"
  echo ''
  sleep 3
fi

if [ ! -r ../gendirs.sh ]; then echo "Assert: ../gendirs.sh not available, are you executing this from within a BASEDIR?"; exit 1; fi

if [ "${1}" == "GAL" ]; then
  if [ -z "$(echo "$(cd ..;./gendirs.sh GAL)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
else
  if [[ "${PWD}" != *"SAN"* ]]; then
    if [ -z "$(echo "$(cd ..;./gendirs.sh)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
  else
    if [ -z "$(echo "$(cd ..;./gendirs.sh SAN)" | grep "$(pwd | sed 's|/$||g;s|.*/||')")" ]; then echo "Assert: the current directory ($PWD) is not included in gendirs.sh! Check ../REGEX_EXCLUDE etc."; exit 1; fi
  fi
fi

export TEXT=
MYEXTRA_OPT=
if [[ "${PWD}" == *"SAN"* || "${1}" == "SAN" ]]; then
  if [ ! -z "$(grep --binary-files=text -i "[^M]SAN" ../REGEX_EXCLUDE | grep -v 'SAN_MD[0-9]')" ]; then
    echo "Assert: remove SAN from ../REGEX_EXCLUDE"
    exit 1
  fi
  if [ -z "${2}" ]; then
    export TEXT="=ERROR:|runtime error:|ThreadSanitizer:|LeakSanitizer:"
  else
    export TEXT="${2}"
  fi
  # MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|SAN||;s|${TEXT}||')"
  MYEXTRA_OPT="$3 $4 $5 $6 $7 $8 $9"
  ~/mariadb-qa/bug_report.sh SAN ${MYEXTRA_OPT} | tee report.log
elif [ "${1}" == "GAL" ]; then
  MYEXTRA_OPT="$*"
  #export TEXT=""  # Look for corefiles (does not work perfectly, ref next line)
  # New test as of 3/11/20: ensure we're looking for 'signal' (of 'got signal'), as cores do not always seem to be generated in MD (long standing issue, source unclear)
  # Note 1/05/21: the reason this still works correctly for Galera is that the Galera build scripts do not have the build code patches for core dumps yet. Thus, "mysqld got signal" or "signal" would likely work fine at all times. Ref below in non-Galera section for more on this. Ideally this would be changed to look for all issues by using "BBB". < TODO
  export TEXT="mysqld got signal"  
  #rm -Rf ../*/data.PREV  # Avoid data.PREV cores from being picked up and save disk space
  ~/mariadb-qa/bug_report.sh GAL ${MYEXTRA_OPT} | tee report.log
else
  MYEXTRA_OPT="$*"
  export TEXT="BBB"  # A dummy string to let findbug+ know we want to scan for a set of strings to establish crashes
  rm -Rf ../*/data.PREV  # Avoid data.PREV cores from being picked up and save disk space
  ~/mariadb-qa/bug_report.sh ${MYEXTRA_OPT} | tee report.log
  # The following code is now precautionary/defensive coding as this is covered in the new port assignment code
  if grep --binary-files=text 'Do you already have another mysqld server running on port' */log/master.err 2>/dev/null; then
    echo "------------------------------------------------------------------------------------------"
    echo "Assert: the text 'Do you already have another mysqld server running on port' was found in:"
    grep -l --binary-files=text 'Do you already have another mysqld server running on port' */log/master.err
    echo "You will probably want to fix this port conflict and then re-run ~/b!"
    echo "------------------------------------------------------------------------------------------"
  fi
fi

if [ ! -z "$(~/t | grep -o 'no core file found')" ]; then
  echo "*) No core file was found, and no *SAN issue detected in the current directory, though other versions may have reproduced the issue! Check 'All strings merged' output below to confirm if any issues were seen in any version tested." | tee -a report.log
  echo "*) As no issue was detected in the current directory, you may want to re-run this from another version's basedir where the issue was detected (Run and check ./allstrings output to find the exact basedir where the issue produced). This will then provide full stacks/a full report." | tee -a report.log
else
  ~/tt | tee -a report.log
fi
REPORT_PATH="${PWD}"
echo '----- All strings merged -----' | tee -a report.log
if [ -r ../allstrings_merged ]; then
  if [ "${1}" == "GAL" ]; then
    cd .. && ./allstrings_merged GAL 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  elif [[ "${PWD}" == *"SAN"* || "${1}" == "SAN" ]]; then
    cd .. && ./allstrings_merged SAN 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  else
    cd .. && ./allstrings_merged 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  fi
fi
# TODO: The next section, which uses allstrings_new can be made much faster by re-using the strings found above rather than re-scanning (i.e. checking all cores again)
if [ -r ../allstrings_new ]; then
  if [ "${1}" == "GAL" ]; then
    echo '----- All NEW (not known yet) strings merged (for adding to ~/kb) -----' | tee -a "${REPORT_PATH}/report.log"
    cd .. && ./allstrings_new GAL 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  elif [[ "${PWD}" == *"SAN"* || "${1}" == "SAN" ]]; then
    echo '----- All NEW (not known yet) strings merged (for adding to ~/kba) -----' | tee -a "${REPORT_PATH}/report.log"
    cd .. && ./allstrings_new SAN 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  else
    echo '----- All NEW (not known yet) strings merged (for adding to ~/kb) -----' | tee -a "${REPORT_PATH}/report.log"
    cd .. && ./allstrings_new 2>&1 | tee -a "${REPORT_PATH}/report.log" && cd - >/dev/null 2>&1
  fi
fi

