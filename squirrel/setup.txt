# https://aflplus.plus/docs/changelog/      # Changelog
# https://aflplus.plus/docs/env_variables/  # All environment vars
# https://aflplus.plus/docs/tutorials/      # Tutorials
# https://aflplus.plus/docs/parallel_fuzzing/
# https://github.com/mirrorer/afl/tree/master/llvm_mode  # llvm_mode + persistent mode (persistent: don't restart mysqld). It seems both llvm_mode and persistent mode are only available in the old (deprecated) AFL. In the new AFLplusplus there no longer is any llvm_mode
# https://github.com/AFLplusplus/AFLplusplus/  # AFLplusplus code
  # afl-persistent-config in this repo: settings to configure server optimally for fuzzing (add to script later) TODO
# https://robertheaton.com/2019/07/08/how-to-write-an-afl-wrapper-for-any-language/ Interesting article. Bit outdated as it refers to original AFL, however the 'deferred forkserver' functionality is still present in AFLplusplus
  # AFL_DEFER_FORKSRV https://aflplus.plus/docs/env_variables/

# For questions
# https://groups.google.com/forum/#!topic/afl-users/
# https://discord.gg/gCraWct

# Interesting environment vars to checkout later:
# Resuming runs: AFL_AUTORESUME, AFL_CMPLOG_ONLY_NEW
# Checking for other error codes: AFL_CRASH_EXITCODE
# Custom mutators may be excellent for SQL: https://aflplus.plus/docs/custom_mutators/ and set with AFL_CUSTOM_MUTATOR_LIBRARY
# AFL_INST_RATIO=10  Ref https://afl-1.readthedocs.io/en/latest/user_guide.html (to only instrument 1/10th etc.)
# AFL_SKIP_CRASHES   idem URL
# AFL_HANG_TMOUT     idem URL
# AFL_NO_ARITH - definitely of interest for MariaDB
# https://aflplus.plus/docs/env_variables/ 
  # "LLVM modes support AFL_LLVM_DICT2FILE=/absolute/path/file.txt which will write all constant string comparisons to this file to be used later with afl-fuzzâ€™ -x option"

# Pre-requisites
sudo apt -y update && apt-get -y upgrade
sudo apt -y purge clang clang-12 clang-14

# Important to get latest LLVM (14)
sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"  # Latest LLVM and includes clang, libc++ etc.
sudo apt -y update && apt-get -y upgrade

sudo apt -y install gdb bison flex git make cmake build-essential gcc-multilib g++-multilib xinetd libreadline-dev zlib1g-dev libssl-dev libncurses5-dev clang-12 clang-14 liblld-12 liblld-14 liblld-12-dev liblld-14-dev vim tmux python3-pip llvm llvm-dev llvm-runtime  # liblld is important
sudo apt install gcc-$(gcc --version | grep -o 'Ubuntu [0-9]\+' | grep -o '[0-9]\+$' | head -n1)-plugin-dev  # Basically, gcc-9-plugin-dev - or any other version, and you can find out the version using gcc --version  # This is likely optional, but if you do not install it you will see 'gcc_plugin for 'afl-cc'  failed to build, unless you really need it that is fine' during the build process
pip install libtmux

sudo apt dist-upgrade  # This will install latest LLVM 14

# Compile AFL, which is used for instrumenting the DBMSs
cd ~
# git clone https://github.com/google/AFL.git  # Did not work, OLD, DO NOT USE. Outdated
git clone https://github.com/AFLplusplus/AFLplusplus.git AFL
cd AFL
# MAP_SIZE_POW2 may also be made 20 or 22, ref https://aflplus.plus/docs/env_variables/ (formula: 2^x where x is 16-24-...)
# IMPORTANT: Note that you need to change it for both AFL being used to build the instrumented server as well as the one in the Squirrel code which is basically an edited AFL!!
# IMPORTANT: 22 seems the minimum that works for 10.3 (without any reduction in AFL_INST_RATIO) - but this arbritary for the moment; too many compile samples as of yet (~5-10)
sed -i  's/#define[ \t]\+MAP_SIZE_POW2[ \t]\+[12][0-9]/#define MAP_SIZE_POW2 22/' config.h  # Set it to 22 (do for both!)
export CC=/usr/bin/clang-14
export CXX=/usr/bin/clang-cpp-14
export LLVM_CONFIG=/usr/bin/llvm-config-14
which llvm-config-14  # Check output is /usr/bin/llvm-config-14
#export CC=/usr/bin/clang-12
#export CXX=/usr/bin/clang-cpp-12
#export LLVM_CONFIG=/usr/bin/llvm-config-12
#which llvm-config-12  # Check output is /usr/bin/llvm-config-12
make  # Do not miss this cmake or the next make two lines lower will not work!
# These next two lines do not seem to be necessary anymore
# cd llvm_mode/
# make  # If make fails for any reason, use:   make clean   before trying again (after making fixes)

cd /test
./clone.sh 10.10
cp -r 10.10 10.10_afl_dbg
cd 10.10_afl_dbg
# Note: apparently LTO is even better then afl-clang-fast/afl-clang-fast++, ref ~/AFL/docs/fuzzing_in_depth.md flowchart
# TODO: also evalute using sanitizers, ref same file
#export CC=/home/roel/AFL/afl-clang-fast              # Use afl-clang-fast/afl-clang-fast++ to compile,
#export CXX=/home/roel/AFL/afl-clang-fast++           # and instrument the sever
#export CC=/home/roel/AFL2/afl-lto      # or should this be afl-clang-lto/afl-clang-lto++ ?
#export CXX=/home/roel/AFL2/afl-lto++   #
#export LLVM_CONFIG=
export CC=/home/roel/AFL3/afl-lto      # or should this be afl-clang-lto/afl-clang-lto++ ?
export CXX=/home/roel/AFL3/afl-lto++   #
export LLVM_CONFIG=

# Not used yet:
export AS=/home/roel/AFL2/afl-as  # Assembler
export AFL_CC=/home/roel/AFL2/afl-lto     # or should this be afl-clang-lto/afl-clang-lto++
export AFL_CXX=/home/roel/AFL2/afl-lto++  #
export AFL_AS=/home/roel/AFL2/afl-as

Now testing w/ 10.7
export CC=/home/roel/AFL2/afl-lto 
export CXX=/home/roel/AFL2/afl-lto++
#export AS=/home/roel/AFL2/afl-as  # Assembler
#export AFL_CC=/home/roel/AFL2/afl-clang-lto 
#export AFL_CXX=/home/roel/AFL2/afl-clang-lto++ 
#export AFL_AS=/home/roel/AFL2/afl-as
export AFL_INST_RATIO=5
> then optimized build

Now testing #2
export CC=/home/roel/AFL2/afl-clang-fast
export CXX=/home/roel/AFL2/afl-clang-fast++
#export AS=/home/roel/AFL2/afl-as  # Assembler
#export AFL_CC=/home/roel/AFL2/afl-clang-fast
#export AFL_CXX=/home/roel/AFL2/afl-clang-fast++
#export AFL_AS=/home/roel/AFL2/afl-as
export AFL_INST_RATIO=13
# this worked and was fast.

Now testing #3 (10.5, opt)
export CC=/home/roel/AFL2/afl-lto
export CXX=/home/roel/AFL2/afl-lto++ 
export AFL_INST_RATIO=13

Now testing #4 (10.5, dbg)
export CC=/home/roel/AFL2/afl-clang-fast
export CXX=/home/roel/AFL2/afl-clang-fast++
export AFL_INST_RATIO=11

# afl-lto or afl-clang-lto likely makes no difference, because when you use afl-to it uses clang anyways:
-- The C compiler identification is Clang 14.0.5
...
-- Check for working C compiler: /home/roel/AFL2/afl-lto
-- Check for working C compiler: /home/roel/AFL2/afl-lto -- works

# Seen during compilation of MariaDB:
# WARNING: dlopen() detected. To have coverage for a library that your target dlopen()'s this must either happen before __AFL_INIT() or you must use AFL_PRELOAD to preload all dlopen()'ed libraries!
# It may thus be necessary to set AFL_PRELOAD to load the libs - but is this only for things like for example ssl or also for engines like Spider. they are not plugins, not libs so likely only applicable to libs

# During builds, you can also see: SanitizerCoveragePCGUARD++4.01 -> PCGUARD instrumentation

# It may be that AFL_LLVM_INSTRUMENT is a compile time option (not runtime option)

# For debug
cmake . -DWITH_SSL=bundled -DCMAKE_BUILD_TYPE=Debug -DBUILD_CONFIG=mysql_release -DWITH_TOKUDB=0 -DWITH_JEMALLOC=no -DFEATURE_SET=community -DDEBUG_EXTNAME=OFF -DWITH_EMBEDDED_SERVER=0 -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/tmp/boost_639515 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DPLUGIN_PERFSCHEMA=NO -DWITH_DBUG_TRACE=OFF -DWITH_ZLIB=bundled -DWITH_ROCKSDB=0 -DWITH_PAM=OFF -DFORCE_INSOURCE_BUILD=1 -DCMAKE_C_FLAGS='-Og -march=native -mtune=native' -DCMAKE_CXX_FLAGS='-Og -march=native -mtune=native' -DMYSQL_MAINTAINER_MODE=OFF -DWITH_MARIABACKUP=0 -DWITH_UNIT_TESTS=OFF -DWITH_DBUG_TRACE=OFF -DWITH_EMBEDDED_SERVER=OFF -DWITH_ROCKSDB=OFF -DWITH_TOKUDB=OFF -DWITH_WSREP_ALL=OFF 
make -j32 | tee /tmp/afl_dbg_bld.log  # About 1h20 minutes all up (inc tar build in next command) on high end GG cloud instance. You should see many "Instrumented 3559 locations" with varying numbers 0-x. Also, when using afl-lto/afl-lto-++ the output in a screen session may become mangled, watch  ps -ef | grep -v grep | grep 'make -j32'  for compilation completion
./scripts/make_binary_distribution

# For optimized
cmake . -DWITH_SSL=bundled -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DWITH_TOKUDB=0 -DFEATURE_SET=community -DDEBUG_EXTNAME=OFF -DWITH_EMBEDDED_SERVER=0 -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/tmp/boost_801864 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DPLUGIN_PERFSCHEMA=NO -DWITH_DBUG_TRACE=OFF -DWITH_ZLIB=bundled -DWITH_ROCKSDB=0 -DWITH_PAM=OFF -DFORCE_INSOURCE_BUILD=1 -DCMAKE_C_FLAGS='-Og -march=native -mtune=native' -DCMAKE_CXX_FLAGS='-Og -march=native -mtune=native' -DWITH_MARIABACKUP=0 -DWITH_UNIT_TESTS=OFF -DWITH_DBUG_TRACE=OFF -DWITH_EMBEDDED_SERVER=OFF -DWITH_ROCKSDB=OFF -DWITH_TOKUDB=OFF -DWITH_WSREP_ALL=OFF 
make -j32 | tee /tmp/afl_opt_bld.log  # Ref above for more info
./scripts/make_binary_distribution

mkdir -p ~/fuzzing/fuzzing_root/init_lib ~/fuzzing/fuzzing_root/crashes ~/fuzzing/fuzzing_root/mysq_linitlib ~/fuzzing/output
sed -i  's/#define[ \t]\+MAP_SIZE_POW2[ \t]\+16/#define MAP_SIZE_POW2 18/' config.h
./c
cp ~/Squirrel/MariaDB/AFL/afl-fuzz ~/fuzzing
cp ~/Squirrel/MariaDB/docker/init_lib/* ~/fuzzing/fuzzing_root/init_lib
cp ~/Squirrel/MariaDB/docker/input/* ~/fuzzing/fuzzing_root/crashes
cp ~/Squirrel/MariaDB/docker/init_lib/* ~/fuzzing/fuzzing_root/mysql_initlib
cp ~/Squirrel/MariaDB/docker/global_data_lib_mysql ~/fuzzing/fuzzing_root
cp ~/Squirrel/MariaDB/docker/safe_generate_type_mysql ~/fuzzing/fuzzing_root
cp ~/Squirrel/MariaDB/docker/run.py ~/fuzzing/fuzzing_root
cd ~/fuzzing/
./go

# If you get:
# shmat for map: Bad file descriptor - it means that you first need to start AFL (which will tell you the SHM_ENV_VAR and then before starting mysqld you need to set export __AFL_SHM_ID=x

Throubleshooting
1] If you see "PROGRAM ABORT : Oops, failed to execute 'clang' - check your PATH" during compilation of AFL, re-do the latest LLVM installation, 
   then  make clean && make  from the same terminal window as where you just reinstalled LLVM. 
   > It may be necessary not to have LLVM_CONFIG/CC/CXX set in that terminal 




cmake . -DWITH_SSL=bundled -DCMAKE_BUILD_TYPE=Debug -DBUILD_CONFIG=mysql_release -DWITH_TOKUDB=0 -DWITH_JEMALLOC=no -DFEATURE_SET=community -DDEBUG_EXTNAME=OFF -DWITH_EMBEDDED_SERVER=0 -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/tmp/boost_809314 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DPLUGIN_PERFSCHEMA=NO -DWITH_DBUG_TRACE=OFF -DWITH_ZLIB=bundled -DWITH_ROCKSDB=1 -DWITH_PAM=ON -DFORCE_INSOURCE_BUILD=1 -DCMAKE_C_FLAGS='-Og -march=native -mtune=native' -DCMAKE_CXX_FLAGS='-Og -march=native -mtune=native' -DMYSQL_MAINTAINER_MODE=OFF -DWITH_ASAN=ON -DWITH_UBSAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_RAPID=OFF -DWSREP_LIB_WITH_ASAN=ON -DWITH_GROONGA=OFF
