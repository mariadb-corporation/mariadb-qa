#!/bin/bash
# Created by Roel Van de Paar, MariaDB

# User variables
#BASEDIR=/test/AFL-MD060525-mariadb-11.8.1-linux-x86_64-dbg  # -dbg or -opt is fine
BASEDIR=/test/UBASAN_MD220825-mariadb-12.1.2-linux-x86_64-dbg
# Internal variables
BASEDIRALT="$(echo "${BASEDIR}" | sed 's|-opt$|-dum|;s|-dbg$|-opt|;s|-dum$|-dbg|')"  # Swaps -dbg to -opt and vice versa
HOME=${HOME}
RANDOM=$(date +%s%N | cut -b10-19)  # Random entropy init

if [ ! -r ${BASEDIR}/bin/mysqld ]; then
  echo "Check setup: ${BASEDIR}/bin/mysqld is missing"
  exit 1
elif [ ! -r ${HOME}/t ]; then
  echo "Check setup: ${HOME}/t is missing (try running ~/mariadb-qa/linkit)"
  exit 1
elif [ ! -r /test/gendirs.sh ]; then
  echo "Check setup: /test/gendirs.sh is missing"
  exit 1
elif [ ! -r ${BASEDIR}/reducer_new_text_string.sh ]; then
  echo "Check setup: ${BASEDIR}/reducer_new_text_string.sh is missing (try running: cd ${BASEDIR} && ~/start)"
  exit 1
elif [ "${STY}" == "" ]; then
  echo "Not a screen, restarting myself inside a screen"
  screen -admS "reducers_run" bash -c "./$0"
  sleep 1
  screen -d -r "reducers_run"
  return 2> /dev/null; exit 0
fi
if [ "${PWD}" != "${HOME}/fuzzing" ]; then
  cd "${HOME}/fuzzing" 2>/dev/null
  if [ "${PWD}" != "${HOME}/fuzzing" ]; then
    echo "Check setup: PWD (${PWD})!= ${HOME}/fuzzing, even after change directory attempt"
    exit 1
  fi
fi

echo "Note: it is probably a good idea to run /test/startup_all (or ~/start for both directories below) to reset any local reducer modifications!"
echo "BASEDIR: ${BASEDIR}"
echo "BASEDIRALT: ${BASEDIRALT}"
echo "HOME: ${HOME}"

echo "Computing runtime size..."
BUGS=$(find . | grep '\.string' | xargs -I{} cat {} | sort -u)  # Note that the runtime comprises of only unique UniqueID's, not of all testcases. There can thus for example be 2k testcases but only 100 UniqueID's. In this case, the runtime is 100, and for each of those 100 this script will select a random testcase out of the 2k testcases to attempt to generate a bug report for the same (after reduction with reducer)
COUNT="$(printf "%s\n" "${BUGS}" | wc -l)"

echo "Processing ${COUNT} bugs..."
for ((i=1;i<=${COUNT};i++)); do
  OUTER_LOOP_CONTINUE=
  BUG="$(printf "%s\n" "${BUGS}" | head -n${i} | tail -n1)"
  echo '-----------------------------------------------------------------------------------------'
  echo "BUG ${i}/${COUNT}: ${BUG}"
  echo '-----------------------------------------------------------------------------------------'
  TCS="$(grep -F "${BUG}" */crashes/*.string)"  # All possible testcases for this particular UniqueID
  # Check if any of the testcases already has a report (which means that we already have a report for this UniqueID and can thus skip ahead to the next UniqueID we need a report for, without doing anything for this UniqueID
  COUNT_TCS="$(printf "%s\n" "${TCS}" | wc -l)"
  if [ -z "${COUNT_TCS}" -o "${COUNT_TCS}" == "0" ]; then
    echo "ERROR: COUNT_TCS (${COUNT_TCS}) was zero or empty for bug '${BUG}'"
    continue
  else
    OUTER_LOOP_CONTINUE=0
    for ((j=1;j<=${COUNT_TCS};j++)); do
      TCC="$(printf "%s\n" "${TCS}" | head -n${j} | tail -n1)"
      if [ -r "${TCC}.report" ]; then
        echo "There already is a report for this UniqueID ('${TCC}.report'), skipping..."
        OUTER_LOOP_CONTINUE=1
        break
      fi
    done
  fi
  TCC=;COUNT_TCS=;j=
  if [ "${OUTER_LOOP_CONTINUE}" == "1" ]; then
    continue
  fi
  TC="$(printf "%s\n" "${TCS}" | shuf --random-source=/dev/urandom | head -n1 | sed 's|\.string:.*||')"  # A random testcase is selected from the pool of testcases which produces this given UniqueID. This is done so that when reducers_run_loop loops to the next cycle, if any previous TC did not reproduce an issue, then the next round, (highly likely) a different one will be used to attempt to reproduce the given UniqueID
  echo "Testcase used: '${TC}'"
  # TODO: this can be slightly improved by attempting to find another testcase that does not have .fail, though in that case we also need to check if all testcases have .fail etc. Also consider highly sporadic issues; they may require multiple attempts. Given that the testcase selection per UniqueID is already random, and that this script loops (i.e. the next round this UniqueID will likely end up with a report as a different testcase will be used). Keep an eye on the frequency of .fail files to get a better idea too. Update: at least added one additional attempt to grab another testcase, which should "cover much" already
  if [ -r "${TC}.fail" ]; then
    echo "This testcase was previously attempted against BASEDIR and BASEDIRALT (unless they were modified), and failed to reproduce, trying one more testcase sample..."
    TC="$(printf "%s\n" "${TCS}" | grep -Fv "${TC}" | shuf --random-source=/dev/urandom | head -n1 | sed 's|\.string:.*||')"  # A random testcase is selected from the pool of testcases which produces this given UniqueID. This is done so that when reducers_run_loop loops to the next cycle, if any previous TC did not reproduce an issue, then the next round, (highly likely) a different one will be used to attempt to reproduce the given UniqueID
    echo "Backup testcase used: '${TC}'"
    if [ -r "${TC}.fail" ]; then
      echo "This testcase was also previously attempted against BASEDIR and BASEDIRALT (unless they were modified), and failed to reproduce, skipping... (Note that this UniqueID will still be re-evaluated on the next loop of this script)..."
      continue
    fi
  fi
  if [[ "${BUG}" == *"Assert:"* ]]; then
    echo "This is an 'Assert:' bug string, skipping..."  # Assert: bug strings indicate some issue with obtaining a UniqueID
    continue
  fi
  # TODO: Just like above, we could have a backup procedure here to grab another testcase. Perhaps this needs to be moved into a function or better into a loop, but there are complexities: what if there are only few testcases (random won't work) or what if a TC always get stuck (random is good idea as another one can be used, but if random is used then how to mark already tried testcases, and if testcases are marked which have already been tried it should be done pre-reducer, but in that case reducer may be interrupted and so the mark is invalid). Too many deps :) A virtue-stands-in-the-middle solution may be to add secondary checks here too (for empty/too large) like the .fail secondary check above.
  TCSIZE="$(wc -l "${TC}" | sed 's| .*||')"
  if [ -z "${TCSIZE}" ]; then
    echo "Testcase '${TC}' is empty? Skipping..."
    touch "${TC}.skipped_empty"
    continue
  fi
  if [ "${TCSIZE}" -gt 490 ]; then
    echo "Testcase '${TC}' is too large for a squirrel testcase, skipping..."
    touch "${TC}.skipped_too_large"
    continue
  fi
  cp "${TC}" "${BASEDIR}/in.sql"
  cd ${BASEDIR}
  echo "Running reducer for testcase..."
  rm -f ./in.sql_out
  sed -i 's|^STAGE1_LINES=[0-9]\+|STAGE1_LINES=5000|' ./reducer_new_text_string.sh
  sed -i 's|^MYEXTRA=".*|MYEXTRA="--no-defaults --server-id=100 --log-output=none --sql_mode= --max_statement_time=5"|' ./reducer_new_text_string.sh
  sed -i 's|^NEW_BUGS_SAVE_DIR="/data/NEWBUGS"|NEW_BUGS_SAVE_DIR="/home/${USER}/fuzzing/newbugs"|' ./reducer_new_text_string.sh
  if [ ! -z ${GAL_RUN} ]; then
    sed -i 's|^MDG=0|MDG=1|' ./reducer_new_text_string.sh
    sed -i 's|^NR_OF_NODES=[0-9]\+|NR_OF_NODES=2|' ./reducer_new_text_string.sh
  fi
  # 20m: we want short runs to ensure all testcases are processed rather than a few taking up a lot/all time
  timeout --signal=9 20m ./reducer_new_text_string.sh "./in.sql" "${BUG}" | tee -a "${TC}.reducer"
  sleep 0.5
  # If the above failed to reproduce the issue, try an alternative BASEDIR (usually opt instead of dbg and vice versa)
  if [ ! -r ./in.sql_out ]; then
    echo "Testcase did not reproduce/reduce on ${BASEDIR}, trying ${BASEDIRALT}..."
    cd ${HOME}/fuzzing
    cp "${TC}" "${BASEDIRALT}/in.sql"
    cd ${BASEDIRALT}
    echo "Running reducer for testcase on alternative BASEDIR..."
    rm -f ./in.sql_out
    sed -i 's|^STAGE1_LINES=[0-9]\+|STAGE1_LINES=500|' ./reducer_new_text_string.sh
    sed -i 's|^MYEXTRA=".*|MYEXTRA="--no-defaults --server-id=100 --log-output=none --sql_mode= --max_statement_time=5"|' ./reducer_new_text_string.sh
    sed -i 's|^NEW_BUGS_SAVE_DIR="/data/NEWBUGS"|NEW_BUGS_SAVE_DIR="/home/${USER}/fuzzing/newbugs"|' ./reducer_new_text_string.sh
    if [ ! -z ${GAL_RUN} ]; then
      sed -i 's|^MDG=0|MDG=1|' ./reducer_new_text_string.sh
      sed -i 's|^NR_OF_NODES=[0-9]\+|NR_OF_NODES=2|' ./reducer_new_text_string.sh
    fi
    # Try an even shorter time on the alternative BASEDIR as we already failed in the main BASEDIR (and used time there)
    timeout --signal=9 10m ./reducer_new_text_string.sh "./in.sql" "${BUG}" | tee -a "${TC}.reducer"
    sleep 0.5
    if [ ! -r ./in.sql_out ]; then
      echo "Testcase did not reproduce/reduce on ${BASEDIRALT} either..."
      cd ${HOME}/fuzzing
      echo "Testcase failed to reproduce/reduce on both:" > "${TC}.fail"
      echo "BASEDIR: ${BASEDIR}" >> "${TC}.fail"
      echo "BASEDIRALT: ${BASEDIRALT}" >> "${TC}.fail"
      continue
    fi  # Note that the implied else for this function is to also run the below code (ref [1])
  fi  # Note that the implied else for this function is also to run the below code (ref [1])
  # [1] Note that this will run if either BASEDIR or BASEDIRALT was able to reproduce & reduce the bug
  # The current PWD can thus be either the BASEDIR or the BASEDIRALT one (and it does not matter for the below)
  # In other words, in.sql_out was found to be present after reduction in either the BASEDIR or the BASEDIRALT dir
  mv ./in.sql_out ./in.sql
  echo "Commencing secondary reducer run in ${PWD}..."
  rm -f ./in.sql_out  # Defensive coding
  sed -i 's|^NEW_BUGS_SAVE_DIR="/data/NEWBUGS"|NEW_BUGS_SAVE_DIR="/home/${USER}/fuzzing/newbugs"|' ./reducer_new_text_string.sh
  timeout --signal=9 45m ./reducer_new_text_string.sh "./in.sql" "${BUG}" | tee -a "${TC}.reducer"
  sleep 0.5
  if [ ! -r ./in.sql_out ]; then
    echo "Secondary reducer run further simplified the testcase..."
    mv ./in.sql_out ./in.sql
  fi
  echo "~/b preflight: terminating any running instances..."
  /test/kill_all
  sleep 2
  echo "Running ~/b for testcase..."
  timeout --signal=9 20m ${HOME}/b   # Whilst ~/b produces a lot of output, it is handy to see where this script is at (i.e. whetter it is reducing a testcase using reducer.sh or if ~/b is being executed). This allows some level of dual work on the server at the same time. i.e. when reducer is running and has some time to finish, ~/b could be used on the server to generate a report for another bug. [A]
  sleep 0.5
  cd ${HOME}/fuzzing
  echo "Copying report..."
  cp ${BASEDIR}/report.log "${TC}.report"
  echo "${TC} completed..."
done

