   # Fuzzing
1] ./start_fuzzing           # Starts 10 fuzzing nodes using mariadb-qa/fuzzer/afl_genstart_tmpfs_nodes

   # Core analysis
2] ./process_testcases       # Automatically starts 1 or 4 core analysis nodes. Best to run at the same time as fuzzing nodes

   # Testcase reduction and analysis
3] ./reducers_run_loop       # Starts reducers for all testcases which do not have a report yet. Then generates ~/b reports
   ./reducers_run            # Called by reducers_run_loop, this is the main script which executes the reducers + ~/b reports

   # Run statistics and cleanup
4] ./queue_stats             # Shows generic counter stats (number of testcases, core analysis count stats etc.)
5] ./list_unique_bugs        # First deletes known bugs, then produces a count and report of UniqueID's observed 
   ./del_known_bugs          # Deletes, based on UnqiueID's, all already known/logged bugs. Used by the list_unique_bugs script
6] ./reports                 # Outputs a list of all (completed and in progress) .report files together with their UniqueID
 
   # Runs termination
7] ./stop_all_fuzzing        # Stops all fuzzing (i.e. nodes started by start_fuzzing/afl_genstart_tmpfs_nodes)
8] ./stop_process_testcases  # Stops 1 or 4 nodes, as started by process_testcases

   # Runs cleanup
9] ./clean_queues            # Use only when fuzzing is not running. Cleans up many AFL temporary files. Mainly for diskspace

   # Tools
*] ./find_uniqueid           # Search all .string files for a given UniqueID, for example as observed in ./report

   # Other files
*] ./afl                     # A link to the script as linked into basedirs by ~/start. Linked here for quick editing purposes

   # File structures
testcase.string              # The UniqueID for the testcase. This file is generated for each testcase by process_testcases
testcase.NOCORE              # Generated by process_testcases for the testcase when it did not crash a given basedir
testcase.report              # A full, post-reducer, ~/b level report for the given testcase as produced by reducers_run

   # Other notes
*] Note that reducers_run/run_reducers_loop uses ~/b with direct /test basedirs; do not use either while this is running
*] However, you can read the note (search for [A] in reducers_run) on using ~/b whilst reducers_run is using reducer 
*] Note that ~/ds will regularly execute del_known_bugs if the script is present in /home/$(whoami)/fuzzing
*] Note that fuzzing, as well as process_testcases uses /dev/shm extensively. Use top to monitor and size tmpfs adequately
*] Note that at times, for an as yet unknown reason, it is necessary to ./start_fuzzing > ./stop_all_fuzzing > ./start_fuzzing
*] Fuzzing is resource intensive. Some additional reducers on a high end machine is fine, but pquery-run.sh is stretching it
*] The fuzzing scripts have been programmed to restart themselves inside a named screen session if not inside a screen already
*] Make sure to use ~/ds and ~/memory as usual

   # Most prominent TODO's
*] Improve GUI output to avoid AFL bit-flip reporting but rather correctly output squirrel SQL verification stats
*] There is no script yet to stop run_reducers_loop/reducers_run
*] Is there a performance impact due to the map resize?
*] Research SQL handling further; ref paper
