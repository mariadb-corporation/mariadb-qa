   # Fuzzing
1] ./start_fuzzing           # Starts 10 fuzzing nodes using mariadb-qa/fuzzer/afl_genstart_tmpfs_nodes

   # Core analysis
2] ./process_testcases       # Automatically starts 1 or 4 core analysis nodes. Best to run at the same time as fuzzing nodes

   # Results analysis/stats
3] ./queue_stats             # Shows generic counter stats (number of testcases, core analysis count stats etc.)
4] ./report                  # First deletes known bugs, then produces a count and report of UniqueID's observed 
   ./list_unique_bugs        # Outputs, without a count, all UniqueID's observed. This script is used by the report script
   ./del_known_bugs          # Deletes, based on UnqiueID's, all already known/logged bugs. Used by the report script
5] ./run_reducers_loop       # Starts reducers for all testcases which do not have a report yet. Then generates ~/b reports
   ./reducers_run            # Called by run_reducers_loop, the main script which executes the reducers + ~/b reports
 
   # Runs maintenance
6] ./stop_all_fuzzing        # Stops all fuzzing (i.e. nodes started by start_fuzzing/afl_genstart_tmpfs_nodes)
7] ./stop_process_testcases  # Stops 1 or 4 nodes, as started by process_testcases

   # Runs cleanup
8] ./clean_queues            # Use only when fuzzing is not running. Cleans up many AFL temporary files. Mainly for diskspace

   # Tools
9] ./find_uniqueid           # Search all .string files for a given UniqueID. Handy to find a testcase for a given UniqueID

   # Other files
0] ./afl                     # A link to the script as linked into basedirs by ~/start. Linked here for quick editing purposes

   # File structures
testcase.string              # The UniqueID for the testcase. This file is generated for each testcase by process_testcases
testcase.NOCORE              # Generated by process_testcases for the testcase when it did not crash a given basedir
testcase.report              # A full, post-reducer, ~/b level report for the given testcase as produced by reducers_run
