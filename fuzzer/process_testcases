#!/bin/bash
# Created by Roel Van de Paar, MariaDB

if [[ "${1}" == "GAL" ]]; then
  export GAL_RUN="GAL"
else
  export GAL_RUN=""
fi

#BASEDIR=/test/AFL-MD060525-mariadb-11.8.1-linux-x86_64-dbg_checker
#BASEDIR=/test/AFL-ASAN-MD171222-mariadb-10.11.2-linux-x86_64
BASEDIR=/test/UBASAN_MD220825-mariadb-12.1.2-linux-x86_64-dbg
LOOP_SCRIPT=1  # Set to 1 to keep looping (handy when fuzzers are running)

cd ${HOME}/fuzzing
if [ "${PWD}" != "${HOME}/fuzzing" ]; then
  echo "Assert: PWD!=${HOME}/fuzzing"
  exit 1
elif [ ! -r ${HOME}/t ]; then
  echo "Assert: ${HOME}/t not present, try ~/mariadb-qa/linkit"
  exit 1
elif [ ! -r ${BASEDIR}/bin/mysqld ]; then
  echo "BASEDIR (${BASEDIR}) does not contain bin/mysqld!"
  exit 1
elif [ ! -r ~/start -a ! -r ~/mariadb-qa/startup.sh ]; then
  echo "Assert: ~/start nor ~/mariadb-qa/startup.sh available: run ~/mariadb-qa/linkit after cloning mariadb-qa from GitHub"
  exit 1
elif [ "${STY}" == "" ]; then  # Disable this to debug the script when needed
  echo "Not a screen, restarting myself inside a screen"
  screen -admS "process_testcases" bash -c "./$0"
  sleep 1
  screen -d -r "process_testcases"
  return 2> /dev/null; exit 0
fi

queue(){
  if [ -z "${1}" ]; then
    echo 'Assert: queue() received blank $1'
    exit 1
  elif [ "${NODES}" -eq 4 ]; then
    if [ "${1}" -lt 0 -o "${1}" -gt 3 ]; then
      echo "Assert: queue() received ${1} as the node ID, while NODES=4"
      exit 1
    fi
  elif [ "${NODES}" -eq 1 ]; then
    if [ "${1}" -lt 0 -o "${1}" -gt 1 ]; then
      echo "Assert: queue() received ${1} as the node ID, while NODES=1"
      exit 1
    fi
  fi
  TODO[${1}]=$(awk "NR>=${NODE_START[${1}]} && NR<=${NODE_END[${1}]} {print \$0}" /tmp/afl_fulllist.txt)
  # These options are used with the all_no_cl startup script in afl and the regular cmd line startup in run_parallel.py
  # And, because all_no_cl is used here, --no-defaults will already be in use by default
  MYEXTRA_OPTIONS="--server-id=100 --log-output=none --sql_mode= --max_statement_time=7"  # =7 instead of =5 for this verifier
  # The 5 minute timeout is for ~/t (which generally takes 1-20 seconds), the 150m timeout is for the full node run
  # Likely 2.5h (150m) will not be sufficient for runs with many testcases to process, but remember the script loops
  if [ ! -z ${GAL_RUN} ]; then
    printf "%s\n" "${TODO[${1}]}" | xargs -I{} echo "rm -f /dev/shm/afl-tc-node${1}/in.sql; sed -i '1 i\# mysqld options required for replay: ${MYEXTRA_OPTIONS}' '${HOME}/fuzzing/{}'; cp '${HOME}/fuzzing/{}' /dev/shm/afl-tc-node${1}/in.sql; cd /dev/shm/afl-tc-node${1}; if [ -r ./in.sql ]; then ./gal_no_cl ${MYEXTRA_OPTIONS} >/dev/null 2>&1; ./gal_test_pquery >/dev/null 2>&1; sleep 20; if [ -r /dev/shm/afl-tc-node${1}/data/core ]; then cd /dev/shm/afl-tc-node${1}; timeout --signal=9 5m /home/$(whoami)/t 'SHOWINFO' '----------- /home/$(whoami)/fuzzing/{}.string:' | tee '/home/$(whoami)/fuzzing/{}.string'; else echo '----------- /home/$(whoami)/fuzzing/{}.NOCORE'; touch '/home/$(whoami)/fuzzing/{}.NOCORE'; fi; fi; cd /home/$(whoami)/fuzzing;" | tr '\n' '\0' | xargs -0 -I{} timeout --signal=9 150m bash -c "{}"
  else
    printf "%s\n" "${TODO[${1}]}" | xargs -I{} echo "rm -f /dev/shm/afl-tc-node${1}/in.sql; sed -i '1 i\# mysqld options required for replay: ${MYEXTRA_OPTIONS}' '${HOME}/fuzzing/{}'; cp '${HOME}/fuzzing/{}' /dev/shm/afl-tc-node${1}/in.sql; cd /dev/shm/afl-tc-node${1}; if [ -r ./in.sql ]; then ./all_no_cl ${MYEXTRA_OPTIONS} >/dev/null 2>&1; ./test_pquery >/dev/null 2>&1; sleep 20; if [ -r /dev/shm/afl-tc-node${1}/data/core ]; then cd /dev/shm/afl-tc-node${1}; timeout --signal=9 5m /home/$(whoami)/t 'SHOWINFO' '----------- /home/$(whoami)/fuzzing/{}.string:' | tee '/home/$(whoami)/fuzzing/{}.string'; else echo '----------- /home/$(whoami)/fuzzing/{}.NOCORE'; touch '/home/$(whoami)/fuzzing/{}.NOCORE'; fi; fi; cd /home/$(whoami)/fuzzing;" | tr '\n' '\0' | xargs -0 -I{} timeout --signal=9 150m bash -c "{}"
  fi
}
 
echo "Using BASEDIR ${BASEDIR}"
if [ "${LOOP_SCRIPT}" -eq 1 ]; then
  echo 'On completion, this script will restart itself to continue processing new testcases...'
fi
echo 'Computing runtime size...'
# Find all testcases
rm -f /tmp/afl_fulllist.txt
find . | grep 'crashes.*sig:' | sed 's|^\./||' > /tmp/afl_fulllist.txt
# Filter already done ones
FILTER=$(cat /tmp/afl_fulllist.txt | grep 'pos:[0-9]\+\.' | sed 's|\(pos:[0-9]\+\)\..*|\1|')
printf "%s\n" "${FILTER}" | grep -v '^[ \t]*$' | xargs -I{} sed -i 's|{}.*||' /tmp/afl_fulllist.txt
FILTER=
TESTCASES=$(</tmp/afl_fulllist.txt)  # Re-read fullist after sed
printf "%s\n" "${TESTCASES}" | grep -v '^[ \t]*$' > /tmp/afl_fulllist.txt
TESTCASES=$(</tmp/afl_fulllist.txt)  # Re-read fullist after empty lines cleanup
COUNT=$(printf "%s\n" "${TESTCASES}" | wc -l)
COUNT=$[ ${COUNT} - 1 ]  # Remove the final printf newline
if [ -z "${COUNT}" -o "${COUNT}" -eq 0 ]; then
  echo "No testcases to process... Done"
  exit 0
else
  echo "${COUNT} testcases to process, splitting..."
  if [ ${COUNT} -gt 40 ]; then
    echo "Will use 4 nodes to process the testcases..."
    NODES=4
    PERNODE=$[ ${COUNT} / 4 ]
    echo "Nodes 0 to 3 will process approximately ${PERNODE} testcases each..."
    NODE_START[0]=1
    NODE_END[0]=${PERNODE}
    NODE_START[1]=$[ ${PERNODE} + 1 ]
    NODE_END[1]=$[ ${PERNODE} * 2 ]
    NODE_START[2]=$[ ${PERNODE} * 2 + 1 ]
    NODE_END[2]=$[ ${PERNODE} * 3 ]
    NODE_START[3]=$[ ${PERNODE} * 3 + 1 ]
    NODE_END[3]=${COUNT}  # Avoid off-by-1 issues as a result of the PERNODE division
    echo "Node assignments: [0]: ${NODE_START[0]}-${NODE_END[0]}, [1]: ${NODE_START[1]}-${NODE_END[1]}, [2]: ${NODE_START[2]}-${NODE_END[2]}, [3]: ${NODE_START[3]}-${NODE_END[3]}"
  else 
    echo "Only ${COUNT} testcases are present; will use a single node to process the testcases..."
    echo "Node 0 will process ${COUNT} testcases..."
    NODES=1
    NODE_START[0]=1
    NODE_END[0]=${COUNT}
    echo "Node assignment: [0]: ${NODE_START[0]}-${NODE_END[0]}"
  fi
fi
if [ -z "${NODES}" ]; then
  echo "Assert: NODES is empty"
  exit 1
fi

# Prep verification nodes, and start processing queues
echo 'Commencing processing testcases...'
rm -Rf /dev/shm/afl-tc-node*
sync
for ((NODE=0;NODE<${NODES};NODE++)){
  echo "Starting testcase verification node ${NODE}..."
  cp -r ${BASEDIR} /dev/shm/afl-tc-node${NODE}
  cd /dev/shm/afl-tc-node${NODE}
  if [ "${PWD}" != "/dev/shm/afl-tc-node${NODE}" -o ! -r "${PWD}/all" ]; then
    echo "Assert: PWD(${PWD})!=/dev/shm/afl-tc-node${NODE} || ${PWD}/all does not exist"
    exit 1
  fi
  rm -Rf FIREWORKS-BUGS COPYING CREDITS INSTALL-BINARY README-wsrep README.md THIRDPARTY docs man mysql-test 16* sql-bench support-files reducer* *gypsy *rr *valgrind sysbench* *multirun* repl* loop* insert* *stbe *.old gdb memory_use_trace multi* gal* clean_failing_queries *noprompt* fixin g binlog *.sql *.out sqlmode test_pquery m include
  if [ ! -z ${GAL_RUN} ]; then
    if [ -r ~/start ]; then ~/start 2 >/dev/null 2>&1; else ~/mariadb-qa/startup.sh 2 >/dev/null 2>&1; fi
  else
    if [ -r ~/start ]; then ~/start >/dev/null 2>&1; else ~/mariadb-qa/startup.sh >/dev/null 2>&1; fi
  fi
  sleep 3
  queue ${NODE} &
  PID[${NODE}]=$!
  echo "Testcase verification node ${NODE} started with PID ${PID[${NODE}]}..."
}
# Wait for nodes to complete work
for ((NODE=0;NODE<${NODES};NODE++)){
  wait ${PID[${NODE}]}
}
rm -Rf /dev/shm/afl-tc-node*
if [ "${LOOP_SCRIPT}" -eq 0 ]; then
 echo "${NODES} completed work... Done!"
  exit 0
else
  echo "${NODES} completed work... Looping!"
  for ((NODE=0;NODE<${NODES};NODE++)){
    kill -9 ${PID[${NODE}]} >/dev/null 2>&1  # Defensive coding
    PID[${NODE}]=
  }
  sleep 3
  rm -Rf /dev/shm/afl-tc-node*
  sync
  sleep 1
  screen -admS "process_testcases" bash -c "./$0"
  exit 0
fi

