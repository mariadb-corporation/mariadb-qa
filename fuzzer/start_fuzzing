#!/bin/bash
# Created by Roel Van de Paar, MariaDB

# User variables
BASEDIR=/test/AFL-MD200622-mariadb-10.10.0-linux-x86_64  # BASEDIR directory of server to test (MariaDB, MySQL, Percona)

# Script variables; do not change
FUZZING_ROOT=~/fuzzing/fuzzing_root

touch /dev/shm/tst 2>/dev/null
if [ ! -r /dev/shm/tst ]; then
  echo "Assert: /dev/shm/tst does not exist after creation attempt?"
  exit 1
else
  rm -f /dev/shm/tst
fi

if [ ! -d '/test' ]; then
  echo "Assert: /test does not exist"
  exit 1
elif [ ! -d ${FUZZING_ROOT} ]; then
  echo "Assert: FUZZING_ROOT ('${FUZZING_ROOT}') does not exist?"
  exit 1
elif [ ! -d ${BASEDIR} ]; then
  echo "Assert: BASEDIR ('${BASEDIR}') does not exist?"
  exit 1
elif [ ! -r ${BASEDIR}/bin/mysqld ]; then
  echo "Assert: BASEDIR/bin/mysqld ('${BASEDIR}/bin/mysqld') does not exist?"
  exit 1
elif ! grep --binary-files=text 'AFL_MAP_SIZE' ${BASEDIR}/bin/mysqld >/dev/null 2>&1; then
  echo "Assert: binary at ${BASEDIR}/bin/mysqld (or mariadbd) is not instrumented!"
  exit 1
elif [ ! -r ~/start -a ! -r ~/mariadb-qa/startup.sh ]; then
  echo "Assert: ~/start nor ~/mariadb-qa/startup.sh available: run ~/mariadb-qa/linkit after cloning mariadb-qa from GitHub"
  exit 1
fi

cd /test
rm -f /test/afl[0-9]_socket.sock
rm -f ~/fuzzing/afl[0-9].log
rm -Rf /dev/shm/afl-node-[0-9]

cleanup_dev_shm_dir(){
  if [[ "${PWD}" == "/dev/shm/"* ]]; then  # Defensive coding
    rm -Rf FIREWORKS-BUGS COPYING CREDITS INSTALL-BINARY README-wsrep README.md THIRDPARTY docs man mysql-test 16* sql-bench support-files reducer* *gypsy *rr *valgrind sysbench* *multirun* multitest repl* loop* insert* *stbe *.old gdb memory_use_trace multi* gal* clean_failing_queries *noprompt* fixin g binlog *.sql *.out sqlmode test_pquery m include 
  fi
}

for((i=0;i<10;i++)); do
  echo "Starting fuzzing node ${i}/9..."
  CURDIR="${PWD}"
  cp -r ${BASEDIR} /dev/shm/afl-node-${i}
  cd /dev/shm/afl-node-${i}
  if [ "${PWD}" == "/dev/shm/afl-node-${i}" ]; then
    # Cleanup as much space as possible, as soon as possible
    if [ -d ./data -a -r ./data/ibdata1 ]; then
      rm -Rf ./data
    fi
    cleanup_dev_shm_dir  
  fi
  if [ -r ~/start ]; then ~/start >/dev/null 2>&1; else ~/mariadb-qa/startup.sh >/dev/null 2>&1; fi
  if [ "${PWD}" == "/dev/shm/afl-node-${i}" ]; then
    cleanup_dev_shm_dir
  fi
  sync
  # TODO: WIP: This help text is not correct. Seems to be an issue with minimal grammars, however some fuzzers seem to work
  # Start server instance first. Currently there is a small race bug in afl-fuzz.c versus this script somewhere that if the 
  # Squirrel/AFL instance is started first insteaed, depending on the timing of things, the Squirrel/AFL will report a '#1' 
  # connection error to the log, and never find the instrumentation link with the server. Restarting the server later, when 
  # this original #1 issue does not happen, seems fine though (including subsequent #1 errors). This issue seems to be 
  # especially present/seen with very small grammars, which almost surely means that a faster startup of Squirrel/AFL will
  # lead to the issue seen. IOW, if the MariaDB server is not there on the very startup of AFL, an issue #1 will be output
  # with no further success. This is also visible in the AFL client where the new paths found (second output line) will
  # always read "none yet (odd..." and the counter at the top right will be green and looping quickly.
  # As a workaround for the time being (and maybe a good permanent solution), the MariaDB server is started first and then
  # there is a 3 second delay after which AFL is started. This 3 second delay may not even be required.
  cd ${FUZZING_ROOT}
  ./go ${i} /dev/shm/afl-node-${i}
  cd /dev/shm/afl-node-${i}
  ./afl ${i}
  cd ${CURDIR}
  echo "Fuzzing node ${i}/9 started..."
done
echo 'Note: you can access CLI clients for each of the fuzzing nodes by using:'
echo '/dev/shm/afl-node-0/bin/mysql -S/test/afl0_socket.sock -uroot  # wherea afl-node-0 and afl0 can be 0 to 9'
