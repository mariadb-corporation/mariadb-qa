#!/bin/bash
# Created by Roel Van de Paar, MariaDB

REGEX_EXCLUDE="$(cat REGEX_EXCLUDE 2>/dev/null)"  # Handy to exclude a particular build
if [ -z "${REGEX_EXCLUDE}" ]; then REGEX_EXCLUDE="DUMMYSTRINGNEVERSEEN"; fi

SAN_MODE=0
GAL_MODE=0
BBB_MODE=0
ERROR_IN_OPTIONS=0
TEXT=
if [ "${1}" == "SAN" -a -z "${2}" ]; then ERROR_IN_OPTIONS=1; fi
if [ "${1}" == "GAL" -a -z "${2}" ]; then ERROR_IN_OPTIONS=1; fi
if [ "${1}" != "GAL" -a "${1}" != "SAN" -a ! -z "${2}" ]; then ERROR_IN_OPTIONS=1; fi
if [ -z "${1}" -o "${ERROR_IN_OPTIONS}" -eq 1 ]; then
  echo "This script expects one or two paramaters;"
  echo "  > For SAN bugs, specify: ./findbug+ SAN 'bug_string_to_look_for' (SAN=UBSAN,ASAN,TSAN)"
  echo "  > For GAL bugs, specify: ./findbug+ GAL 'bug_string_to_look_for' (GAL=Galera)"
  echo "  > For crashing bugs, specify: ./findbug+ 'BBB' (BBB=Common crash strings are all scanned)"
  echo "  > For GAL crashing bugs, specify: ./findbug+ 'GAL' 'BBB' (BBB=Common crash strings are all scanned)"
  echo "  > For all other bugs, specify: ./findbug+ 'bug_string_to_look_for' without a first option"
  echo "After testing of in.sql is complete, this script will look for the string 'bug_string_to_look_for' in the error log."
  echo "It expects that test_all was already executed"
  exit 1
fi
TEXT="${1}"  # Note this may be 'SAN', 'GAL' or 'BBB', and if so it will be replaced respectively below
if [ "${TEXT}" == "SAN" ]; then
  SAN_MODE=1
  TEXT="${2}"  # Presence of ${2} was checked earlier above (ref ERROR_IN_OPTIONS)
elif [ "${TEXT}" == "GAL" ]; then
  GAL_MODE=1
  REGEX_EXCLUDE="${REGEX_EXCLUDE//EMD|/}"
  TEXT="${2}"  # Note this may be 'BBB' and if so it will be replaced below
  NODE=1
  if [ ! -z "${3}" ]; then
    NODE="${3}"  # Could be '*' or 1,2,3,... (node to be scanned: all or specific 1,2,3,...)
  fi
fi
if [ "${TEXT}" == "BBB" ]; then  # BBB: coding dummy string passed by ~/b to enable searching for multitude of strings
  BBB_MODE=1
  TEXT="[ \t]0x[0-9a-f][0-9a-f][0-9a-f][0-9a-f]|signal|[Aa]ssertion"
fi

rm -f /tmp/pri.t /tmp/sec.t

FILT=
if [ "${SAN_MODE}" -eq 1 ]; then
  FILT=('SAN')
elif [ "${GAL_MODE}" -eq 1 ]; then
  FILT=('GAL')
else
  FILT=(-vE 'SAN|GAL')
fi

VER_SCAN_STRING='mariadb-[-\.0-9]+-[od][pb][tg]|mysql-[\.0-9]+-[od][pb][tg]'

ls --color=never | grep -vEi --binary-files=text "${REGEX_EXCLUDE}" | grep "${FILT[@]}" | sed 's|-linux-x86_64||' | grep -oE --binary-files=text "${VER_SCAN_STRING}" | sort -u > /tmp/pri.t

# Generate bug list
grep -Ei --binary-files=text "${TEXT}" */log/master.err */node${NODE}/node${NODE}.err 2>/dev/null | grep -vEi --binary-files=text "${REGEX_EXCLUDE}" | grep --binary-files=text "${FILT[@]}" | sed 's|-linux-x86_64||' | grep -oE --binary-files=text "${VER_SCAN_STRING}" | sort -u > /tmp/sec.t
FILT=
if [ "${BBB_MODE}" -eq 1 ]; then
  mv /tmp/sec.t /tmp/sec.t.1
  ls --color=never */data/core* */node${NODE}/core* 2>/dev/null | sed 's|-linux-x86_64||' | grep -oE --binary-files=text "${VER_SCAN_STRING}" | sort -u > /tmp/sec.t.2
  cat /tmp/sec.t.1 /tmp/sec.t.2 2>/dev/null | sort -u > /tmp/sec.t
  rm -f /tmp/sec.t.1 /tmp/sec.t.2
fi

# Output bug-present-in list
echo "Bug confirmed present in:"
cat /tmp/sec.t | sed 's|-| |;s|mysql|DUMMY2|' | tr '\n' ',' | sed 's|DUMMY2|\nMySQL:|;s|DUMMY2||g;s|,|, |g;s|^mariadb|DUMMY|;s|mariadb ||g;s|DUMMY|MariaDB:|;s|-dbg| (dbg)|g;s|-opt| (opt)|g;' | sed 's|, $||;s|  | |g'; echo ''

# Bug strings for bug-present-in list
#echo -e "\nBug strings for this list:"
#./findbug "$1" | sed 's|:.*||' | xargs -I{} echo "echo {}; ~/mariadb-qa/text_string.sh {}" | xargs -I{} bash -c "{}"

# Compile/output bug-not-present-in list
echo -e "\nBug (or feature/syntax) confirmed not present in:"
diff /tmp/pri.t /tmp/sec.t | grep --binary-files=text '<' | sed 's|^< ||' | sed 's|-| |;s|mysql|DUMMY2|' | tr '\n' ',' | sed 's|DUMMY2|\nMySQL:|;s|DUMMY2||g;s|,|, |g;s|^mariadb|DUMMY|;s|mariadb ||g;s|DUMMY|MariaDB:|;s|-dbg| (dbg)|g;s|-opt| (opt)|g;' | sed 's|, $||;s|  | |g'; echo ''
