#!/bin/bash
# Created by Roel Van de Paar, MariaDB

# User variables
SHORTER_STOP_TIME=25  # TODO: this can be improved
LEGACY_MODE=0  # When set to 1, the older/legacy findbug+ is used to look for a specific TEXT string. The default setting is '0' which uses the newer findbug_new, which outputs a bug detection matrix and is not TEXT-string based. It may still be handy for manual testing, but please set this setting back to 0 after use

if [ -z "${PASS_MYEXTRA_TO_START_ONLY}" ]; then  # Check if an external script (like mariadb-qa/bug_report.sh) has set this option. If not, set it here
  PASS_MYEXTRA_TO_START_ONLY=1  # If 0, then MYEXTRA_OPT is passed to ./all (i.e. options take effect on init and start). If 1, then MYEXTRA_OPT is passed to ./start only (i.e. options take effect on start only, not init). When using for example --innodb_page_size=4 (an option needed for both server init + start), 0 is required. When using for example --innodb-force-recovery=1 or --innodb-read-only=1 (options that can only be used with start and not with init), 1 is required. TODO: this option can be automated 0/1 towards known options that require either 0 or 1 for this setting. Scan MYEXSTRA_OPT to do so
fi

# Script variables, do not change
MYEXTRA_OPT="$*"
SAN_MODE=0
MSAN_MODE=0
GAL_MODE=0
REPL_MODE=0
# To ensure thread-safety, only delete the relevant test.result[.san/.gal] file so that b and bs (but not b and br) can run at the same time - for the meaning of 'b/bs/br' see the corresponding aliases in ~/.bashrc after running ~/mariadb-qa/linkit and following it's instructions for creating ~/.bashrc
if [ "${1}" == "SAN" ]; then
  rm -f test.result.san
   if [ -z "${TEXT}" ]; then   # Passed normally by ~/bs and bug_report.sh script
    echo "Assert: TEXT is empty, use export TEXT= to set it!"
    exit 1
  fi
  SAN_MODE=1
  MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|SAN||')"
elif [ "${1}" == "MSAN" ]; then
  rm -f test.result.san
   if [ -z "${TEXT}" ]; then   # Passed normally by ~/bm and bug_report.sh script
    echo "Assert: TEXT is empty, use export TEXT= to set it!"
    exit 1
  fi
  MSAN_MODE=1
  MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|MSAN||')"
elif [ "${1}" == "GAL" ]; then
  rm -f test.result.gal
  GAL_MODE=1
  MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|GAL||')"
elif [ "${1}" == "REPL" ]; then
  rm -f test.result
  REPL_MODE=1
  MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|REPL||')"
else  # Regular mode
  rm -f test.result
fi

if [ ! -r ./in.sql ]; then
  echo "./in.sql does not exist!"
  exit 1
fi

# Startup all server fresh (clean data dir) (as background processes; end handling done by ./all_all)
if [ "${PASS_MYEXTRA_TO_START_ONLY}" -eq 0 ]; then
  if [ ${SAN_MODE} -eq 1 ]; then
    ./all_all SAN ${MYEXTRA_OPT}
  elif [ ${MSAN_MODE} -eq 1 ]; then
    ./all_all MSAN ${MYEXTRA_OPT}
  elif [ ${GAL_MODE} -eq 1 ]; then
    ./all_all GAL ${MYEXTRA_OPT}
  elif [ ${REPL_MODE} -eq 1 ]; then
    ./all_all REPL ${MYEXTRA_OPT}
  else
    ./all_all ${MYEXTRA_OPT}
  fi
else
  if [ ${SAN_MODE} -eq 1 ]; then
    ./all_all SAN
    if [ ! -z "${MYEXTRA_OPT}" ]; then
      ./stop_all SAN
      ./start_all SAN ${MYEXTRA_OPT}
    fi
  elif [ ${iSAN_MODE} -eq 1 ]; then
    ./all_all MSAN
    if [ ! -z "${MYEXTRA_OPT}" ]; then
      ./stop_all MSAN
      ./start_all MSAN ${MYEXTRA_OPT}
    fi
  elif [ ${GAL_MODE} -eq 1 ]; then
    ./all_all GAL
    if [ ! -z "${MYEXTRA_OPT}" ]; then
      ./stop_all GAL
      ./start_all GAL ${MYEXTRA_OPT}
    fi
  elif [ ${REPL_MODE} -eq 1 ]; then
    ./all_all REPL
    if [ ! -z "${MYEXTRA_OPT}" ]; then
      ./stop_all REPL
      ./start_all REPL ${MYEXTRA_OPT}
    fi
  else
    ./all_all
    if [ ! -z "${MYEXTRA_OPT}" ]; then
      ./stop_all
      ./start_all ${MYEXTRA_OPT}
    fi
  fi
fi
sync
rm -Rf MD*/data.PREV EMD*/data.PREV MS*/data.PREV  # Cleanup old data dirs for clean runs (after they were created (moved) by ./all scripts as started by ./all_all above

# Copy in.sql to all instances
if [ ${SAN_MODE} -eq 1 ]; then
  ./copy_in.sql_all SAN
elif [ ${MSAN_MODE} -eq 1 ]; then
  ./copy_in.sql_all MSAN
elif [ ${GAL_MODE} -eq 1 ]; then
  ./copy_in.sql_all GAL
else  # Standard run, includes REPL run
  ./copy_in.sql_all
fi

# Run the test and stop the servers
if [ ${GAL_MODE} -eq 1 ]; then
  TEST_SCRIPT="./gal_test"
  if [ "${BPQUERY}" == "1" ]; then
    TEST_SCRIPT="./gal_test_pquery"
  fi
else
  TEST_SCRIPT="./test"
  if [ "${BPQUERY}" == "1" ]; then
    TEST_SCRIPT="./test_pquery"
  fi
fi
if [ ${SAN_MODE} -eq 1 ]; then
  ./gendirs.sh SAN | xargs -I{} echo "cd {}; ${TEST_SCRIPT}; sleep 2; timeout -k${SHORTER_STOP_TIME} -s9 ${SHORTER_STOP_TIME}s ./stop; cd .." | xargs -P50 -I{} bash -c "{}"
elif [ ${MSAN_MODE} -eq 1 ]; then
  ./gendirs.sh MSAN | xargs -I{} echo "cd {}; ${TEST_SCRIPT}; sleep 2; timeout -k${SHORTER_STOP_TIME} -s9 ${SHORTER_STOP_TIME}s ./stop; cd .." | xargs -P50 -I{} bash -c "{}"
elif [ ${GAL_MODE} -eq 1 ]; then
  ./gendirs.sh GAL | xargs -I{} echo "cd {}; ${TEST_SCRIPT}; sleep 2; timeout -k${SHORTER_STOP_TIME} -s9 ${SHORTER_STOP_TIME}s ./gal_stop; cd .." | xargs -P50 -I{} bash -c "{}"
else  # Standard run, includes REPL run
  ./gendirs.sh | xargs -I{} echo "cd {}; ${TEST_SCRIPT}; sleep 2; timeout -k${SHORTER_STOP_TIME} -s9 ${SHORTER_STOP_TIME}s ./stop; cd .." | xargs -P50 -I{} bash -c "{}"
fi
sleep 13  # Give servers some time to properly shutdown. TODO: this can be improved

# Ensure servers are gone
sync
if [ ${SAN_MODE} -eq 1 ]; then
  ./kill_all SAN
elif [ ${MSAN_MODE} -eq 1 ]; then
  ./kill_all MSAN
elif [ ${GAL_MODE} -eq 1 ]; then
  ./kill_all GAL
elif [ ${REPL_MODE} -eq 1 ]; then
  ./kill_all REPL
else
  ./kill_all
fi
sync

if [ "${LEGACY_MODE}" -eq 0 ]; then
  # Defaut mode: output bug detection matrix using ./findbug_new, and save copy for easy bug reporting (mariadb-qa/bug_report.sh)
  echo 'Generating the Bug Detection Matrix, this may take a few mintues!'
  if [ ${SAN_MODE} -eq 1 ]; then
    ./findbug_new SAN | tee test.results.san
  elif [ ${MSAN_MODE} -eq 1 ]; then
    ./findbug_new MSAN | tee test.results.san
  elif [ ${GAL_MODE} -eq 1 ]; then
    ./findbug_new GAL | tee test.results.gal
  else  # Standard run, includes REPL run
    ./findbug_new | tee test.results
  fi
else
  # Legacy mode: output results. Saving of results is no longer supported (nor needed)
  if [ ${SAN_MODE} -eq 1 ]; then
    ./findbug+ SAN "${TEXT}"
  elif [ ${MSAN_MODE} -eq 1 ]; then
    ./findbug+ MSAN "${TEXT}"
  elif [ ${GAL_MODE} -eq 1 ]; then
    ./findbug+ GAL "${TEXT}"
  else  # Standard run, includes REPL run
    ./findbug+ "${TEXT}" 
  fi
fi
